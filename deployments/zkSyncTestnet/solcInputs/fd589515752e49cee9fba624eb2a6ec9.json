{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(ITransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(ITransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(ITransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(ITransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        ITransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\n * include them in the ABI so this interface must be used to interact with it.\n */\ninterface ITransparentUpgradeableProxy is IERC1967 {\n    function admin() external view returns (address);\n\n    function implementation() external view returns (address);\n\n    function changeAdmin(address) external;\n\n    function upgradeTo(address) external;\n\n    function upgradeToAndCall(address, bytes memory) external payable;\n}\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n *\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\n * implementation.\n *\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     *\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\n     * implementation provides a function with the same selector.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\n     */\n    function _fallback() internal virtual override {\n        if (msg.sender == _getAdmin()) {\n            bytes memory ret;\n            bytes4 selector = msg.sig;\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\n                ret = _dispatchUpgradeTo();\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\n                ret = _dispatchUpgradeToAndCall();\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\n                ret = _dispatchChangeAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\n                ret = _dispatchAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\n                ret = _dispatchImplementation();\n            } else {\n                revert(\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n            }\n            assembly {\n                return(add(ret, 0x20), mload(ret))\n            }\n        } else {\n            super._fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function _dispatchAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address admin = _getAdmin();\n        return abi.encode(admin);\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function _dispatchImplementation() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address implementation = _implementation();\n        return abi.encode(implementation);\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _dispatchChangeAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newAdmin = abi.decode(msg.data[4:], (address));\n        _changeAdmin(newAdmin);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     */\n    function _dispatchUpgradeTo() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newImplementation = abi.decode(msg.data[4:], (address));\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     */\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\n        _upgradeToAndCall(newImplementation, data, true);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\n     */\n    function _requireZeroValue() private {\n        require(msg.value == 0);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "contracts/maci-contracts/Imports.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {ConstantInitialVoiceCreditProxy} from \"maci-contracts/contracts/initialVoiceCreditProxy/ConstantInitialVoiceCreditProxy.sol\";\nimport {FreeForAllGatekeeper} from \"maci-contracts/contracts/gatekeepers/FreeForAllSignUpGatekeeper.sol\";\nimport {Verifier} from \"maci-contracts/contracts/crypto/Verifier.sol\";\nimport {PoseidonT3} from \"maci-contracts/contracts/crypto/PoseidonT3.sol\";\nimport {PoseidonT4} from \"maci-contracts/contracts/crypto/PoseidonT4.sol\";\nimport {PoseidonT5} from \"maci-contracts/contracts/crypto/PoseidonT5.sol\";\nimport {PoseidonT6} from \"maci-contracts/contracts/crypto/PoseidonT6.sol\";\nimport {PollFactory} from \"maci-contracts/contracts/PollFactory.sol\";\nimport {MessageProcessorFactory} from \"maci-contracts/contracts/MessageProcessorFactory.sol\";\nimport {TallyFactory} from \"maci-contracts/contracts/TallyFactory.sol\";\nimport {VkRegistry} from \"maci-contracts/contracts/VkRegistry.sol\";\nimport {HasherBenchmarks} from \"maci-contracts/contracts/benchmarks/HasherBenchmarks.sol\";\nimport {Hasher} from \"maci-contracts/contracts/crypto/Hasher.sol\";\nimport {SnarkCommon} from \"maci-contracts/contracts/crypto/SnarkCommon.sol\";\nimport {SnarkConstants} from \"maci-contracts/contracts/crypto/SnarkConstants.sol\";\n\ncontract Imports {}\n"
    },
    "contracts/maci-contracts/MACIWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {MACI} from \"maci-contracts/contracts/MACI.sol\";\nimport {IPollFactory} from \"maci-contracts/contracts/interfaces/IPollFactory.sol\";\nimport {IMessageProcessorFactory} from \"maci-contracts/contracts/interfaces/IMPFactory.sol\";\nimport {ITallyFactory} from \"maci-contracts/contracts/interfaces/ITallyFactory.sol\";\nimport {SignUpGatekeeper} from \"maci-contracts/contracts/gatekeepers/SignUpGatekeeper.sol\";\nimport {InitialVoiceCreditProxy} from \"maci-contracts/contracts/initialVoiceCreditProxy/InitialVoiceCreditProxy.sol\";\nimport {TopupCredit} from \"maci-contracts/contracts/TopupCredit.sol\";\n\n/// @title MACI - Minimum Anti-Collusion Infrastructure Version 1\n/// @notice A contract which allows users to sign up, and deploy new polls\ncontract MACIWrapper is MACI {\n    struct PollData {\n        uint256 id;\n        string name;\n        bytes encodedOptions;\n        string metadata;\n        MACIWrapper.PollContracts pollContracts;\n        uint256 startTime;\n        uint256 endTime;\n        uint256 numOfOptions;\n        string[] options;\n        string tallyJsonCID;\n    }\n\n    mapping(uint256 => PollData) internal _polls;\n\n    TreeDepths public treeDepths;\n    PubKey public coordinatorPubKey;\n    address public verifier;\n    address public vkRegistry;\n\n    mapping(address => uint256) public pollIds;\n    mapping(address voter => uint256 stateIndex) public voterToStateIndex;\n\n    event PollCreated(\n        uint256 indexed pollId,\n        address indexed creator,\n        MACIWrapper.PollContracts pollContracts,\n        string name,\n        string[] options,\n        string metadata,\n        uint256 startTime,\n        uint256 endTime\n    );\n\n    event PollTallyCIDUpdated(uint256 indexed pollId, string tallyJsonCID);\n\n    // pubkey.x => pubkey.y => bool\n    mapping(uint256 => mapping(uint256 => bool)) public isPublicKeyRegistered;\n\n    error PubKeyAlreadyRegistered();\n    error PollAddressDoesNotExist(address _poll);\n\n    constructor(\n        IPollFactory _pollFactory,\n        IMessageProcessorFactory _messageProcessorFactory,\n        ITallyFactory _tallyFactory,\n        SignUpGatekeeper _signUpGatekeeper,\n        InitialVoiceCreditProxy _initialVoiceCreditProxy,\n        TopupCredit _topupCredit,\n        uint8 _stateTreeDepth\n    )\n        MACI(\n            _pollFactory,\n            _messageProcessorFactory,\n            _tallyFactory,\n            _signUpGatekeeper,\n            _initialVoiceCreditProxy,\n            _topupCredit,\n            _stateTreeDepth\n        )\n    {}\n\n    function setConfig(\n        TreeDepths memory _treeDepths,\n        PubKey memory _coordinatorPubKey,\n        address _verifier,\n        address _vkRegistry\n    ) public onlyOwner {\n        treeDepths = _treeDepths;\n        coordinatorPubKey = _coordinatorPubKey;\n        verifier = _verifier;\n        vkRegistry = _vkRegistry;\n    }\n\n    /// @notice Allows any eligible user sign up. The sign-up gatekeeper should prevent\n    /// double sign-ups or ineligible users from doing so.  This function will\n    /// only succeed if the sign-up deadline has not passed. It also enqueues a\n    /// fresh state leaf into the state AccQueue.\n    /// @param _pubKey The user's desired public key.\n    /// @param _signUpGatekeeperData Data to pass to the sign-up gatekeeper's\n    ///     register() function. For instance, the POAPGatekeeper or\n    ///     SignUpTokenGatekeeper requires this value to be the ABI-encoded\n    ///     token ID.\n    /// @param _initialVoiceCreditProxyData Data to pass to the\n    ///     InitialVoiceCreditProxy, which allows it to determine how many voice\n    ///     credits this user should have.\n    function signUp(\n        PubKey memory _pubKey,\n        bytes memory _signUpGatekeeperData,\n        bytes memory _initialVoiceCreditProxyData\n    ) public override {\n        // check if the pubkey is already registered\n        if (isPublicKeyRegistered[_pubKey.x][_pubKey.y])\n            revert PubKeyAlreadyRegistered();\n\n        super.signUp(\n            _pubKey,\n            _signUpGatekeeperData,\n            _initialVoiceCreditProxyData\n        );\n\n        voterToStateIndex[msg.sender] = lazyIMTData.numberOfLeaves - 1;\n        isPublicKeyRegistered[_pubKey.x][_pubKey.y] = true;\n    }\n\n    function createPoll(\n        string calldata _name,\n        string[] calldata _options,\n        string calldata _metadata,\n        uint256 _duration,\n        Mode isQv\n    ) public onlyOwner {\n        // TODO: check if the number of options are more than limit\n\n        uint256 pollId = nextPollId;\n\n        PollContracts memory pollContracts = deployPoll(\n            _duration,\n            treeDepths,\n            coordinatorPubKey,\n            verifier,\n            vkRegistry,\n            isQv\n        );\n\n        pollIds[pollContracts.poll] = pollId;\n\n        // encode options to bytes for retrieval\n        bytes memory encodedOptions = abi.encode(_options);\n\n        uint256 endTime = block.timestamp + _duration;\n\n        // create poll\n        _polls[pollId] = PollData({\n            id: pollId,\n            name: _name,\n            encodedOptions: encodedOptions,\n            numOfOptions: _options.length,\n            metadata: _metadata,\n            startTime: block.timestamp,\n            endTime: endTime,\n            pollContracts: pollContracts,\n            options: _options,\n            tallyJsonCID: \"\"\n        });\n\n        emit PollCreated(\n            pollId,\n            msg.sender,\n            pollContracts,\n            _name,\n            _options,\n            _metadata,\n            block.timestamp,\n            endTime\n        );\n    }\n\n    function getPollId(address _poll) public view returns (uint256 pollId) {\n        if (pollIds[_poll] >= nextPollId) revert PollAddressDoesNotExist(_poll);\n        pollId = pollIds[_poll];\n    }\n\n    function updatePollTallyCID(\n        uint256 _pollId,\n        string calldata _tallyJsonCID\n    ) public onlyOwner {\n        if (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\n        PollData storage poll = _polls[_pollId];\n        poll.tallyJsonCID = _tallyJsonCID;\n\n        emit PollTallyCIDUpdated(_pollId, _tallyJsonCID);\n    }\n\n    function fetchPolls(\n        uint256 _page,\n        uint256 _perPage,\n        bool _ascending\n    ) public view returns (PollData[] memory polls_) {\n        uint256 start = (_page - 1) * _perPage;\n        uint256 end = start + _perPage - 1;\n\n        if (start >= nextPollId) {\n            return new PollData[](0);\n        }\n\n        if (end >= nextPollId) {\n            end = nextPollId - 1;\n        }\n\n        polls_ = new PollData[](end - start + 1);\n\n        uint256 index = 0;\n        for (uint256 i = start; i <= end; i++) {\n            uint256 pollIndex = i;\n            if (!_ascending) {\n                pollIndex = nextPollId - i - 1;\n            }\n            polls_[index++] = _polls[pollIndex];\n        }\n    }\n\n    function fetchPoll(\n        uint256 _pollId\n    ) public view returns (PollData memory poll_) {\n        if (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\n        return _polls[_pollId];\n    }\n}\n"
    },
    "contracts/maci-contracts/poseidonT3.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport {PoseidonT3} from \"maci-contracts/contracts/crypto/PoseidonT3.sol\";\n\ncontract poseidonT3 {}\n"
    },
    "contracts/maci-contracts/poseidonT4.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport {PoseidonT4} from \"maci-contracts/contracts/crypto/PoseidonT4.sol\";\n\ncontract poseidonT4 {}\n"
    },
    "contracts/maci-contracts/poseidonT5.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport {PoseidonT5} from \"maci-contracts/contracts/crypto/PoseidonT5.sol\";\n\ncontract poseidonT5 {}\n"
    },
    "contracts/maci-contracts/poseidonT6.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport {PoseidonT6} from \"maci-contracts/contracts/crypto/PoseidonT6.sol\";\n\ncontract poseidonT6 {}\n"
    },
    "maci-contracts/contracts/benchmarks/HasherBenchmarks.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { Hasher } from \"../crypto/Hasher.sol\";\n\n/// @title HasherBenchmarks\n/// @notice A contract used to benchmark the poseidon hash function\ncontract HasherBenchmarks is Hasher {\n  /// @notice Benchmark the poseidon hash function with 5 inputs\n  /// @param array The array of inputs to hash\n  /// @return result The hash of the inputs\n  function hash5Benchmark(uint256[5] memory array) public pure returns (uint256 result) {\n    result = hash5(array);\n  }\n\n  /// @notice Benchmark the poseidon hash function with 2 inputs\n  /// @param _left The left input to hash\n  /// @param _right The right input to hash\n  /// @return result The hash of the two inputs\n  function hashLeftRightBenchmark(uint256 _left, uint256 _right) public pure returns (uint256 result) {\n    result = hashLeftRight(_left, _right);\n  }\n}\n"
    },
    "maci-contracts/contracts/crypto/BabyJubJub.sol": {
      "content": "// @note This code was taken from\n// https://github.com/yondonfu/sol-baby-jubjub/blob/master/contracts/CurveBabyJubJub.sol\n// Thanks to yondonfu for the code\n// Implementation cited on baby-jubjub's paper\n// https://eips.ethereum.org/EIPS/eip-2494#implementation\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nlibrary CurveBabyJubJub {\n  // Curve parameters\n  // E: 168700x^2 + y^2 = 1 + 168696x^2y^2\n  // A = 168700\n  uint256 public constant A = 0x292FC;\n  // D = 168696\n  uint256 public constant D = 0x292F8;\n  // Prime Q = 21888242871839275222246405745257275088548364400416034343698204186575808495617\n  uint256 public constant Q = 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001;\n\n  /**\n   * @dev Add 2 points on baby jubjub curve\n   * Formula for adding 2 points on a twisted Edwards curve:\n   * x3 = (x1y2 + y1x2) / (1 + dx1x2y1y2)\n   * y3 = (y1y2 - ax1x2) / (1 - dx1x2y1y2)\n   */\n  function pointAdd(uint256 _x1, uint256 _y1, uint256 _x2, uint256 _y2) internal view returns (uint256 x3, uint256 y3) {\n    if (_x1 == 0 && _y1 == 0) {\n      return (_x2, _y2);\n    }\n\n    if (_x2 == 0 && _y1 == 0) {\n      return (_x1, _y1);\n    }\n\n    uint256 x1x2 = mulmod(_x1, _x2, Q);\n    uint256 y1y2 = mulmod(_y1, _y2, Q);\n    uint256 dx1x2y1y2 = mulmod(D, mulmod(x1x2, y1y2, Q), Q);\n    uint256 x3Num = addmod(mulmod(_x1, _y2, Q), mulmod(_y1, _x2, Q), Q);\n    uint256 y3Num = submod(y1y2, mulmod(A, x1x2, Q), Q);\n\n    x3 = mulmod(x3Num, inverse(addmod(1, dx1x2y1y2, Q)), Q);\n    y3 = mulmod(y3Num, inverse(submod(1, dx1x2y1y2, Q)), Q);\n  }\n\n  /**\n   * @dev Double a point on baby jubjub curve\n   * Doubling can be performed with the same formula as addition\n   */\n  function pointDouble(uint256 _x1, uint256 _y1) internal view returns (uint256 x2, uint256 y2) {\n    return pointAdd(_x1, _y1, _x1, _y1);\n  }\n\n  /**\n   * @dev Multiply a point on baby jubjub curve by a scalar\n   * Use the double and add algorithm\n   */\n  function pointMul(uint256 _x1, uint256 _y1, uint256 _d) internal view returns (uint256 x2, uint256 y2) {\n    uint256 remaining = _d;\n\n    uint256 px = _x1;\n    uint256 py = _y1;\n    uint256 ax = 0;\n    uint256 ay = 0;\n\n    while (remaining != 0) {\n      if ((remaining & 1) != 0) {\n        // Binary digit is 1 so add\n        (ax, ay) = pointAdd(ax, ay, px, py);\n      }\n\n      (px, py) = pointDouble(px, py);\n\n      remaining = remaining / 2;\n    }\n\n    x2 = ax;\n    y2 = ay;\n  }\n\n  /**\n   * @dev Check if a given point is on the curve\n   * (168700x^2 + y^2) - (1 + 168696x^2y^2) == 0\n   */\n  function isOnCurve(uint256 _x, uint256 _y) internal pure returns (bool) {\n    uint256 xSq = mulmod(_x, _x, Q);\n    uint256 ySq = mulmod(_y, _y, Q);\n    uint256 lhs = addmod(mulmod(A, xSq, Q), ySq, Q);\n    uint256 rhs = addmod(1, mulmod(mulmod(D, xSq, Q), ySq, Q), Q);\n    return submod(lhs, rhs, Q) == 0;\n  }\n\n  /**\n   * @dev Perform modular subtraction\n   */\n  function submod(uint256 _a, uint256 _b, uint256 _mod) internal pure returns (uint256) {\n    uint256 aNN = _a;\n\n    if (_a <= _b) {\n      aNN += _mod;\n    }\n\n    return addmod(aNN - _b, 0, _mod);\n  }\n\n  /**\n   * @dev Compute modular inverse of a number\n   */\n  function inverse(uint256 _a) internal view returns (uint256) {\n    // We can use Euler's theorem instead of the extended Euclidean algorithm\n    // Since m = Q and Q is prime we have: a^-1 = a^(m - 2) (mod m)\n    return expmod(_a, Q - 2, Q);\n  }\n\n  /**\n   * @dev Helper function to call the bigModExp precompile\n   */\n  function expmod(uint256 _b, uint256 _e, uint256 _m) internal view returns (uint256 o) {\n    assembly {\n      let memPtr := mload(0x40)\n      mstore(memPtr, 0x20) // Length of base _b\n      mstore(add(memPtr, 0x20), 0x20) // Length of exponent _e\n      mstore(add(memPtr, 0x40), 0x20) // Length of modulus _m\n      mstore(add(memPtr, 0x60), _b) // Base _b\n      mstore(add(memPtr, 0x80), _e) // Exponent _e\n      mstore(add(memPtr, 0xa0), _m) // Modulus _m\n\n      // The bigModExp precompile is at 0x05\n      let success := staticcall(gas(), 0x05, memPtr, 0xc0, memPtr, 0x20)\n      switch success\n      case 0 {\n        revert(0x0, 0x0)\n      }\n      default {\n        o := mload(memPtr)\n      }\n    }\n  }\n}\n"
    },
    "maci-contracts/contracts/crypto/Hasher.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { SnarkConstants } from \"./SnarkConstants.sol\";\nimport { PoseidonT3 } from \"./PoseidonT3.sol\";\nimport { PoseidonT4 } from \"./PoseidonT4.sol\";\nimport { PoseidonT5 } from \"./PoseidonT5.sol\";\nimport { PoseidonT6 } from \"./PoseidonT6.sol\";\n\n/// @notice A SHA256 hash function for any number of input elements, and Poseidon hash\n/// functions for 2, 3, 4, 5, and 12 input elements.\ncontract Hasher is SnarkConstants {\n  /// @notice Computes the SHA256 hash of an array of uint256 elements.\n  /// @param array The array of uint256 elements.\n  /// @return result The SHA256 hash of the array.\n  function sha256Hash(uint256[] memory array) public pure returns (uint256 result) {\n    result = uint256(sha256(abi.encodePacked(array))) % SNARK_SCALAR_FIELD;\n  }\n\n  /// @notice Computes the Poseidon hash of two uint256 elements.\n  /// @param array An array of two uint256 elements.\n  /// @return result The Poseidon hash of the two elements.\n  function hash2(uint256[2] memory array) public pure returns (uint256 result) {\n    result = PoseidonT3.poseidon(array);\n  }\n\n  /// @notice Computes the Poseidon hash of three uint256 elements.\n  /// @param array An array of three uint256 elements.\n  /// @return result The Poseidon hash of the three elements.\n  function hash3(uint256[3] memory array) public pure returns (uint256 result) {\n    result = PoseidonT4.poseidon(array);\n  }\n\n  /// @notice Computes the Poseidon hash of four uint256 elements.\n  /// @param array An array of four uint256 elements.\n  /// @return result The Poseidon hash of the four elements.\n  function hash4(uint256[4] memory array) public pure returns (uint256 result) {\n    result = PoseidonT5.poseidon(array);\n  }\n\n  /// @notice Computes the Poseidon hash of five uint256 elements.\n  /// @param array An array of five uint256 elements.\n  /// @return result The Poseidon hash of the five elements.\n  function hash5(uint256[5] memory array) public pure returns (uint256 result) {\n    result = PoseidonT6.poseidon(array);\n  }\n\n  /// @notice Computes the Poseidon hash of two uint256 elements.\n  /// @param left the first element to hash.\n  /// @param right the second element to hash.\n  /// @return result The Poseidon hash of the two elements.\n  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 result) {\n    uint256[2] memory input;\n    input[0] = left;\n    input[1] = right;\n    result = hash2(input);\n  }\n}\n"
    },
    "maci-contracts/contracts/crypto/Pairing.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Copyright 2017 Christian Reitwiessner\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\n// 2019 OKIMS\n\npragma solidity ^0.8.20;\n\n/// @title Pairing\n/// @notice A library implementing the alt_bn128 elliptic curve operations.\nlibrary Pairing {\n  uint256 public constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n  struct G1Point {\n    uint256 x;\n    uint256 y;\n  }\n\n  // Encoding of field elements is: X[0] * z + X[1]\n  struct G2Point {\n    uint256[2] x;\n    uint256[2] y;\n  }\n\n  /// @notice custom errors\n  error PairingAddFailed();\n  error PairingMulFailed();\n  error PairingOpcodeFailed();\n\n  /// @notice The negation of p, i.e. p.plus(p.negate()) should be zero.\n  function negate(G1Point memory p) internal pure returns (G1Point memory) {\n    // The prime q in the base field F_q for G1\n    if (p.x == 0 && p.y == 0) {\n      return G1Point(0, 0);\n    } else {\n      return G1Point(p.x, PRIME_Q - (p.y % PRIME_Q));\n    }\n  }\n\n  /// @notice r Returns the sum of two points of G1.\n  function plus(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\n    uint256[4] memory input;\n    input[0] = p1.x;\n    input[1] = p1.y;\n    input[2] = p2.x;\n    input[3] = p2.y;\n    bool success;\n\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\n      // Use \"invalid\" to make gas estimation work\n      switch success\n      case 0 {\n        invalid()\n      }\n    }\n\n    if (!success) {\n      revert PairingAddFailed();\n    }\n  }\n\n  /// @notice r Return the product of a point on G1 and a scalar, i.e.\n  ///         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\n  ///         points p.\n  function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\n    uint256[3] memory input;\n    input[0] = p.x;\n    input[1] = p.y;\n    input[2] = s;\n    bool success;\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\n      // Use \"invalid\" to make gas estimation work\n      switch success\n      case 0 {\n        invalid()\n      }\n    }\n\n    if (!success) {\n      revert PairingMulFailed();\n    }\n  }\n\n  /// @return isValid The result of computing the pairing check\n  ///         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\n  ///        For example,\n  ///        pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\n  function pairing(\n    G1Point memory a1,\n    G2Point memory a2,\n    G1Point memory b1,\n    G2Point memory b2,\n    G1Point memory c1,\n    G2Point memory c2,\n    G1Point memory d1,\n    G2Point memory d2\n  ) internal view returns (bool isValid) {\n    G1Point[4] memory p1;\n    p1[0] = a1;\n    p1[1] = b1;\n    p1[2] = c1;\n    p1[3] = d1;\n\n    G2Point[4] memory p2;\n    p2[0] = a2;\n    p2[1] = b2;\n    p2[2] = c2;\n    p2[3] = d2;\n\n    uint256 inputSize = 24;\n    uint256[] memory input = new uint256[](inputSize);\n\n    for (uint8 i = 0; i < 4; ) {\n      uint8 j = i * 6;\n      input[j + 0] = p1[i].x;\n      input[j + 1] = p1[i].y;\n      input[j + 2] = p2[i].x[0];\n      input[j + 3] = p2[i].x[1];\n      input[j + 4] = p2[i].y[0];\n      input[j + 5] = p2[i].y[1];\n\n      unchecked {\n        i++;\n      }\n    }\n\n    uint256[1] memory out;\n    bool success;\n\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\n      // Use \"invalid\" to make gas estimation work\n      switch success\n      case 0 {\n        invalid()\n      }\n    }\n\n    if (!success) {\n      revert PairingOpcodeFailed();\n    }\n\n    isValid = out[0] != 0;\n  }\n}\n"
    },
    "maci-contracts/contracts/crypto/PoseidonT3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @notice A library which provides functions for computing Pedersen hashes.\nlibrary PoseidonT3 {\n  // solhint-disable-next-line no-empty-blocks\n  function poseidon(uint256[2] memory input) public pure returns (uint256) {}\n}\n"
    },
    "maci-contracts/contracts/crypto/PoseidonT4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @notice A library which provides functions for computing Pedersen hashes.\nlibrary PoseidonT4 {\n  // solhint-disable-next-line no-empty-blocks\n  function poseidon(uint256[3] memory input) public pure returns (uint256) {}\n}\n"
    },
    "maci-contracts/contracts/crypto/PoseidonT5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @notice A library which provides functions for computing Pedersen hashes.\nlibrary PoseidonT5 {\n  // solhint-disable-next-line no-empty-blocks\n  function poseidon(uint256[4] memory input) public pure returns (uint256) {}\n}\n"
    },
    "maci-contracts/contracts/crypto/PoseidonT6.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @notice A library which provides functions for computing Pedersen hashes.\nlibrary PoseidonT6 {\n  // solhint-disable-next-line no-empty-blocks\n  function poseidon(uint256[5] memory input) public pure returns (uint256) {}\n}\n"
    },
    "maci-contracts/contracts/crypto/SnarkCommon.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\nimport { Pairing } from \"./Pairing.sol\";\n\n/// @title SnarkCommon\n/// @notice a Contract which holds a struct\n/// representing a Groth16 verifying key\ncontract SnarkCommon {\n  /// @notice a struct representing a Groth16 verifying key\n  struct VerifyingKey {\n    Pairing.G1Point alpha1;\n    Pairing.G2Point beta2;\n    Pairing.G2Point gamma2;\n    Pairing.G2Point delta2;\n    Pairing.G1Point[] ic;\n  }\n}\n"
    },
    "maci-contracts/contracts/crypto/SnarkConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title SnarkConstants\n/// @notice This contract contains constants related to the SNARK\n/// components of MACI.\ncontract SnarkConstants {\n  /// @notice The scalar field\n  uint256 internal constant SNARK_SCALAR_FIELD =\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n  /// @notice The public key here is the first Pedersen base\n  /// point from iden3's circomlib implementation of the Pedersen hash.\n  /// Since it is generated using a hash-to-curve function, we are\n  /// confident that no-one knows the private key associated with this\n  /// public key. See:\n  /// https://github.com/iden3/circomlib/blob/d5ed1c3ce4ca137a6b3ca48bec4ac12c1b38957a/src/pedersen_printbases.js\n  /// Its hash should equal\n  /// 6769006970205099520508948723718471724660867171122235270773600567925038008762.\n  uint256 internal constant PAD_PUBKEY_X =\n    10457101036533406547632367118273992217979173478358440826365724437999023779287;\n  uint256 internal constant PAD_PUBKEY_Y =\n    19824078218392094440610104313265183977899662750282163392862422243483260492317;\n\n  /// @notice The Keccack256 hash of 'Maci'\n  uint256 internal constant NOTHING_UP_MY_SLEEVE =\n    8370432830353022751713833565135785980866757267633941821328460903436894336785;\n}\n"
    },
    "maci-contracts/contracts/crypto/Verifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { Pairing } from \"./Pairing.sol\";\nimport { SnarkConstants } from \"./SnarkConstants.sol\";\nimport { SnarkCommon } from \"./SnarkCommon.sol\";\nimport { IVerifier } from \"../interfaces/IVerifier.sol\";\n\n/// @title Verifier\n/// @notice a Groth16 verifier contract\ncontract Verifier is IVerifier, SnarkConstants, SnarkCommon {\n  struct Proof {\n    Pairing.G1Point a;\n    Pairing.G2Point b;\n    Pairing.G1Point c;\n  }\n\n  using Pairing for *;\n\n  uint256 public constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n  /// @notice custom errors\n  error InvalidProofQ();\n  error InvalidInputVal();\n\n  /// @notice Verify a zk-SNARK proof\n  /// @param _proof The proof\n  /// @param vk The verifying key\n  /// @param input The public inputs to the circuit\n  /// @return isValid Whether the proof is valid given the verifying key and public\n  ///          input. Note that this function only supports one public input.\n  ///          Refer to the Semaphore source code for a verifier that supports\n  ///          multiple public inputs.\n  function verify(\n    uint256[8] memory _proof,\n    VerifyingKey memory vk,\n    uint256 input\n  ) public view override returns (bool isValid) {\n    Proof memory proof;\n    proof.a = Pairing.G1Point(_proof[0], _proof[1]);\n    proof.b = Pairing.G2Point([_proof[2], _proof[3]], [_proof[4], _proof[5]]);\n    proof.c = Pairing.G1Point(_proof[6], _proof[7]);\n\n    // Make sure that proof.A, B, and C are each less than the prime q\n    checkPoint(proof.a.x);\n    checkPoint(proof.a.y);\n    checkPoint(proof.b.x[0]);\n    checkPoint(proof.b.y[0]);\n    checkPoint(proof.b.x[1]);\n    checkPoint(proof.b.y[1]);\n    checkPoint(proof.c.x);\n    checkPoint(proof.c.y);\n\n    // Make sure that the input is less than the snark scalar field\n    if (input >= SNARK_SCALAR_FIELD) {\n      revert InvalidInputVal();\n    }\n\n    // Compute the linear combination vk_x\n    Pairing.G1Point memory vkX = Pairing.G1Point(0, 0);\n\n    vkX = Pairing.plus(vkX, Pairing.scalarMul(vk.ic[1], input));\n\n    vkX = Pairing.plus(vkX, vk.ic[0]);\n\n    isValid = Pairing.pairing(\n      Pairing.negate(proof.a),\n      proof.b,\n      vk.alpha1,\n      vk.beta2,\n      vkX,\n      vk.gamma2,\n      proof.c,\n      vk.delta2\n    );\n  }\n\n  function checkPoint(uint256 point) internal pure {\n    if (point >= PRIME_Q) {\n      revert InvalidProofQ();\n    }\n  }\n}\n"
    },
    "maci-contracts/contracts/gatekeepers/FreeForAllSignUpGatekeeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { SignUpGatekeeper } from \"./SignUpGatekeeper.sol\";\n\n/// @title FreeForAllGatekeeper\n/// @notice A SignUpGatekeeper which allows anyone to sign up.\ncontract FreeForAllGatekeeper is SignUpGatekeeper {\n  /// @notice Create a new instance of FreeForAllGatekeeper\n  // solhint-disable-next-line no-empty-blocks\n  constructor() payable {}\n\n  /// @notice setMaciInstance does nothing in this gatekeeper\n  /// @param _maci The MACI contract\n  // solhint-disable-next-line no-empty-blocks\n  function setMaciInstance(address _maci) public override {}\n\n  /// @notice Registers the user without any restrictions.\n  /// @param _address The address of the user\n  /// @param _data memory additional data\n  // solhint-disable-next-line no-empty-blocks\n  function register(address _address, bytes memory _data) public override {}\n}\n"
    },
    "maci-contracts/contracts/gatekeepers/SignUpGatekeeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title SignUpGatekeeper\n/// @notice A gatekeeper contract which allows users to sign up for a poll.\nabstract contract SignUpGatekeeper {\n  /// @notice Allows to set the MACI contract\n  // solhint-disable-next-line no-empty-blocks\n  function setMaciInstance(address _maci) public virtual {}\n\n  /// @notice Registers the user\n  /// @param _user The address of the user\n  /// @param _data additional data\n  // solhint-disable-next-line no-empty-blocks\n  function register(address _user, bytes memory _data) public virtual {}\n}\n"
    },
    "maci-contracts/contracts/initialVoiceCreditProxy/ConstantInitialVoiceCreditProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { InitialVoiceCreditProxy } from \"./InitialVoiceCreditProxy.sol\";\n\n/// @title ConstantInitialVoiceCreditProxy\n/// @notice This contract allows to set a constant initial voice credit balance\n/// for MACI's voters.\ncontract ConstantInitialVoiceCreditProxy is InitialVoiceCreditProxy {\n  /// @notice the balance to be returned by getVoiceCredits\n  uint256 internal balance;\n\n  /// @notice creates a new ConstantInitialVoiceCreditProxy\n  /// @param _balance the balance to be returned by getVoiceCredits\n  constructor(uint256 _balance) payable {\n    balance = _balance;\n  }\n\n  /// @notice Returns the constant balance for any new MACI's voter\n  /// @return balance\n  function getVoiceCredits(address, bytes memory) public view override returns (uint256) {\n    return balance;\n  }\n}\n"
    },
    "maci-contracts/contracts/initialVoiceCreditProxy/InitialVoiceCreditProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title InitialVoiceCreditProxy\n/// @notice This contract is the base contract for\n/// InitialVoiceCreditProxy contracts. It allows to set a custom initial voice\n/// credit balance for MACI's voters.\nabstract contract InitialVoiceCreditProxy {\n  /// @notice Returns the initial voice credit balance for a new MACI's voter\n  /// @param _user the address of the voter\n  /// @param _data additional data\n  /// @return the balance\n  // solhint-disable-next-line no-empty-blocks\n  function getVoiceCredits(address _user, bytes memory _data) public view virtual returns (uint256) {}\n}\n"
    },
    "maci-contracts/contracts/interfaces/IMACI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { AccQueue } from \"../trees/AccQueue.sol\";\n\n/// @title IMACI\n/// @notice MACI interface\ninterface IMACI {\n  /// @notice Get the depth of the state tree\n  /// @return The depth of the state tree\n  function stateTreeDepth() external view returns (uint8);\n\n  /// @notice Return the main root of the StateAq contract\n  /// @return The Merkle root\n  function getStateTreeRoot() external view returns (uint256);\n\n  /// @notice Get the number of signups\n  /// @return numsignUps The number of signups\n  function numSignUps() external view returns (uint256);\n}\n"
    },
    "maci-contracts/contracts/interfaces/IMessageProcessor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\n/// @title IMessageProcessor\n/// @notice MessageProcessor interface\ninterface IMessageProcessor {\n  /// @notice Get the result of whether there are unprocessed messages left\n  /// @return Whether there are unprocessed messages left\n  function processingComplete() external view returns (bool);\n\n  /// @notice Get the commitment to the state and ballot roots\n  /// @return The commitment to the state and ballot roots\n  function sbCommitment() external view returns (uint256);\n}\n"
    },
    "maci-contracts/contracts/interfaces/IMPFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { DomainObjs } from \"../utilities/DomainObjs.sol\";\n\n/// @title IMessageProcessorFactory\n/// @notice MessageProcessorFactory interface\ninterface IMessageProcessorFactory {\n  /// @notice Deploy a new MessageProcessor contract and return the address.\n  /// @param _verifier Verifier contract\n  /// @param _vkRegistry VkRegistry contract\n  /// @param _poll Poll contract\n  /// @param _owner Owner of the MessageProcessor contract\n  /// @param _mode Voting mode\n  /// @return The deployed MessageProcessor contract\n  function deploy(\n    address _verifier,\n    address _vkRegistry,\n    address _poll,\n    address _owner,\n    DomainObjs.Mode _mode\n  ) external returns (address);\n}\n"
    },
    "maci-contracts/contracts/interfaces/IPoll.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { DomainObjs } from \"../utilities/DomainObjs.sol\";\nimport { IMACI } from \"./IMACI.sol\";\nimport { AccQueue } from \"../trees/AccQueue.sol\";\nimport { TopupCredit } from \"../TopupCredit.sol\";\n\n/// @title IPoll\n/// @notice Poll interface\ninterface IPoll {\n  /// @notice The number of messages which have been processed and the number of signups\n  /// @return numSignups The number of signups\n  /// @return numMsgs The number of messages sent by voters\n  function numSignUpsAndMessages() external view returns (uint256 numSignups, uint256 numMsgs);\n\n  /// @notice Allows to publish a Topup message\n  /// @param stateIndex The index of user in the state queue\n  /// @param amount The amount of credits to topup\n  function topup(uint256 stateIndex, uint256 amount) external;\n\n  /// @notice Allows anyone to publish a message (an encrypted command and signature).\n  /// This function also enqueues the message.\n  /// @param _message The message to publish\n  /// @param _encPubKey An epheremal public key which can be combined with the\n  /// coordinator's private key to generate an ECDH shared key with which\n  /// to encrypt the message.\n  function publishMessage(DomainObjs.Message memory _message, DomainObjs.PubKey calldata _encPubKey) external;\n\n  /// @notice The second step of merging the MACI state AccQueue. This allows the\n  /// ProcessMessages circuit to access the latest state tree and ballots via\n  /// currentSbCommitment.\n  function mergeMaciStateAq() external;\n\n  /// @notice The first step in merging the message AccQueue so that the\n  /// ProcessMessages circuit can access the message root.\n  /// @param _numSrQueueOps The number of subroot queue operations to perform\n  function mergeMessageAqSubRoots(uint256 _numSrQueueOps) external;\n\n  /// @notice The second step in merging the message AccQueue so that the\n  /// ProcessMessages circuit can access the message root.\n  function mergeMessageAq() external;\n\n  /// @notice Returns the Poll's deploy time and duration\n  /// @return _deployTime The deployment timestamp\n  /// @return _duration The duration of the poll\n  function getDeployTimeAndDuration() external view returns (uint256 _deployTime, uint256 _duration);\n\n  /// @notice Get the result of whether the MACI contract's stateAq has been merged by this contract\n  /// @return Whether the MACI contract's stateAq has been merged by this contract\n  function stateAqMerged() external view returns (bool);\n\n  /// @notice Get the depths of the merkle trees\n  /// @return intStateTreeDepth The depth of the state tree\n  /// @return messageTreeSubDepth The subdepth of the message tree\n  /// @return messageTreeDepth The depth of the message tree\n  /// @return voteOptionTreeDepth The subdepth of the vote option tree\n  function treeDepths()\n    external\n    view\n    returns (uint8 intStateTreeDepth, uint8 messageTreeSubDepth, uint8 messageTreeDepth, uint8 voteOptionTreeDepth);\n\n  /// @notice Get the max values for the poll\n  /// @return maxMessages The maximum number of messages\n  /// @return maxVoteOptions The maximum number of vote options\n  function maxValues() external view returns (uint256 maxMessages, uint256 maxVoteOptions);\n\n  /// @notice Get the external contracts\n  /// @return maci The IMACI contract\n  /// @return messageAq The AccQueue contract\n  /// @return topupCredit The TopupCredit contract\n  function extContracts() external view returns (IMACI maci, AccQueue messageAq, TopupCredit topupCredit);\n\n  /// @notice Get the hash of coordinator's public key\n  /// @return _coordinatorPubKeyHash the hash of coordinator's public key\n  function coordinatorPubKeyHash() external view returns (uint256 _coordinatorPubKeyHash);\n\n  /// @notice Get the commitment to the state leaves and the ballots. This is\n  /// hash3(stateRoot, ballotRoot, salt).\n  /// Its initial value should be\n  /// hash(maciStateRootSnapshot, emptyBallotRoot, 0)\n  /// Each successful invocation of processMessages() should use a different\n  /// salt to update this value, so that an external observer cannot tell in\n  /// the case that none of the messages are valid.\n  /// @return The commitment to the state leaves and the ballots\n  function currentSbCommitment() external view returns (uint256);\n\n  /// @notice Get the dynamic depth of the state tree at the time of poll\n  /// finalization (based on the number of leaves inserted)\n  function actualStateTreeDepth() external view returns (uint8);\n}\n"
    },
    "maci-contracts/contracts/interfaces/IPollFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { TopupCredit } from \"../TopupCredit.sol\";\nimport { Params } from \"../utilities/Params.sol\";\nimport { DomainObjs } from \"../utilities/DomainObjs.sol\";\n\n/// @title IPollFactory\n/// @notice PollFactory interface\ninterface IPollFactory {\n  /// @notice Deploy a new Poll contract and AccQueue contract for messages.\n  /// @param _duration The duration of the poll\n  /// @param _maxValues The max values for the poll\n  /// @param _treeDepths The depths of the merkle trees\n  /// @param _coordinatorPubKey The coordinator's public key\n  /// @param _maci The MACI contract interface reference\n  /// @param _topupCredit The TopupCredit contract\n  /// @param _pollOwner The owner of the poll\n  /// @return The deployed Poll contract\n  function deploy(\n    uint256 _duration,\n    Params.MaxValues memory _maxValues,\n    Params.TreeDepths memory _treeDepths,\n    DomainObjs.PubKey memory _coordinatorPubKey,\n    address _maci,\n    TopupCredit _topupCredit,\n    address _pollOwner\n  ) external returns (address);\n}\n"
    },
    "maci-contracts/contracts/interfaces/ITallyFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { DomainObjs } from \"../utilities/DomainObjs.sol\";\n\n/// @title ITallyFactory\n/// @notice TallyFactory interface\ninterface ITallyFactory {\n  /// @notice Deploy a new Tally contract and return the address.\n  /// @param _verifier Verifier contract\n  /// @param _vkRegistry VkRegistry contract\n  /// @param _poll Poll contract\n  /// @param _messageProcessor MessageProcessor contract\n  /// @param _owner Owner of the contract\n  /// @param _mode Voting mode\n  /// @return The deployed contract\n  function deploy(\n    address _verifier,\n    address _vkRegistry,\n    address _poll,\n    address _messageProcessor,\n    address _owner,\n    DomainObjs.Mode _mode\n  ) external returns (address);\n}\n"
    },
    "maci-contracts/contracts/interfaces/IVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { SnarkCommon } from \"../crypto/SnarkCommon.sol\";\n\n/// @title IVerifier\n/// @notice an interface for a Groth16 verifier contract\ninterface IVerifier {\n  /// @notice Verify a zk-SNARK proof\n  /// @param _proof The proof\n  /// @param vk The verifying key\n  /// @param input The public inputs to the circuit\n  /// @return Whether the proof is valid given the verifying key and public\n  ///          input. Note that this function only supports one public input.\n  ///          Refer to the Semaphore source code for a verifier that supports\n  ///          multiple public inputs.\n  function verify(\n    uint256[8] memory _proof,\n    SnarkCommon.VerifyingKey memory vk,\n    uint256 input\n  ) external view returns (bool);\n}\n"
    },
    "maci-contracts/contracts/interfaces/IVkRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { SnarkCommon } from \"../crypto/SnarkCommon.sol\";\nimport { DomainObjs } from \"../utilities/DomainObjs.sol\";\n\n/// @title IVkRegistry\n/// @notice VkRegistry interface\ninterface IVkRegistry {\n  /// @notice Get the tally verifying key\n  /// @param _stateTreeDepth The state tree depth\n  /// @param _intStateTreeDepth The intermediate state tree depth\n  /// @param _voteOptionTreeDepth The vote option tree depth\n  /// @param _mode QV or Non-QV\n  /// @return The verifying key\n  function getTallyVk(\n    uint256 _stateTreeDepth,\n    uint256 _intStateTreeDepth,\n    uint256 _voteOptionTreeDepth,\n    DomainObjs.Mode _mode\n  ) external view returns (SnarkCommon.VerifyingKey memory);\n\n  /// @notice Get the process verifying key\n  /// @param _stateTreeDepth The state tree depth\n  /// @param _messageTreeDepth The message tree depth\n  /// @param _voteOptionTreeDepth The vote option tree depth\n  /// @param _messageBatchSize The message batch size\n  /// @param _mode QV or Non-QV\n  /// @return The verifying key\n  function getProcessVk(\n    uint256 _stateTreeDepth,\n    uint256 _messageTreeDepth,\n    uint256 _voteOptionTreeDepth,\n    uint256 _messageBatchSize,\n    DomainObjs.Mode _mode\n  ) external view returns (SnarkCommon.VerifyingKey memory);\n}\n"
    },
    "maci-contracts/contracts/MACI.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {IPollFactory} from \"./interfaces/IPollFactory.sol\";\nimport {IMessageProcessorFactory} from \"./interfaces/IMPFactory.sol\";\nimport {ITallyFactory} from \"./interfaces/ITallyFactory.sol\";\nimport {InitialVoiceCreditProxy} from \"./initialVoiceCreditProxy/InitialVoiceCreditProxy.sol\";\nimport {SignUpGatekeeper} from \"./gatekeepers/SignUpGatekeeper.sol\";\nimport {IMACI} from \"./interfaces/IMACI.sol\";\nimport {Params} from \"./utilities/Params.sol\";\nimport {TopupCredit} from \"./TopupCredit.sol\";\nimport {Utilities} from \"./utilities/Utilities.sol\";\nimport {DomainObjs} from \"./utilities/DomainObjs.sol\";\nimport {CurveBabyJubJub} from \"./crypto/BabyJubJub.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {InternalLazyIMT, LazyIMTData} from \"./trees/LazyIMT.sol\";\n\n/// @title MACI - Minimum Anti-Collusion Infrastructure Version 1\n/// @notice A contract which allows users to sign up, and deploy new polls\ncontract MACI is IMACI, DomainObjs, Params, Utilities, Ownable {\n    /// @notice The state tree depth is fixed. As such it should be as large as feasible\n    /// so that there can be as many users as possible.  i.e. 5 ** 10 = 9765625\n    /// this should also match the parameter of the circom circuits.\n    uint8 public immutable stateTreeDepth;\n\n    /// @notice IMPORTANT: remember to change the ballot tree depth\n    /// in contracts/ts/genEmptyBallotRootsContract.ts file\n    /// if we change the state tree depth!\n    uint8 internal constant STATE_TREE_SUBDEPTH = 2;\n    uint8 internal constant TREE_ARITY = 2;\n    uint8 internal constant MESSAGE_TREE_ARITY = 5;\n\n    /// @notice The hash of a blank state leaf\n    uint256 internal constant BLANK_STATE_LEAF_HASH =\n        uint256(\n            6769006970205099520508948723718471724660867171122235270773600567925038008762\n        );\n\n    /// @notice Each poll has an incrementing ID\n    uint256 public nextPollId;\n\n    /// @notice A mapping of poll IDs to Poll contracts.\n    mapping(uint256 => address) public polls;\n\n    /// @notice ERC20 contract that hold topup credits\n    TopupCredit public immutable topupCredit;\n\n    /// @notice Factory contract that deploy a Poll contract\n    IPollFactory public immutable pollFactory;\n\n    /// @notice Factory contract that deploy a MessageProcessor contract\n    IMessageProcessorFactory public immutable messageProcessorFactory;\n\n    /// @notice Factory contract that deploy a Tally contract\n    ITallyFactory public immutable tallyFactory;\n\n    /// @notice The state tree. Represents a mapping between each user's public key\n    /// and their voice credit balance.\n    LazyIMTData public lazyIMTData;\n\n    /// @notice Address of the SignUpGatekeeper, a contract which determines whether a\n    /// user may sign up to vote\n    SignUpGatekeeper public immutable signUpGatekeeper;\n\n    /// @notice The contract which provides the values of the initial voice credit\n    /// balance per user\n    InitialVoiceCreditProxy public immutable initialVoiceCreditProxy;\n\n    /// @notice A struct holding the addresses of poll, mp and tally\n    struct PollContracts {\n        address poll;\n        address messageProcessor;\n        address tally;\n    }\n\n    // Events\n    event SignUp(\n        uint256 _stateIndex,\n        uint256 indexed _userPubKeyX,\n        uint256 indexed _userPubKeyY,\n        uint256 _voiceCreditBalance,\n        uint256 _timestamp\n    );\n    event DeployPoll(\n        uint256 _pollId,\n        uint256 indexed _coordinatorPubKeyX,\n        uint256 indexed _coordinatorPubKeyY,\n        PollContracts pollAddr\n    );\n\n    /// @notice Only allow a Poll contract to call the modified function.\n    modifier onlyPoll(uint256 _pollId) {\n        if (msg.sender != address(polls[_pollId]))\n            revert CallerMustBePoll(msg.sender);\n        _;\n    }\n\n    /// @notice custom errors\n    error CallerMustBePoll(address _caller);\n    error PoseidonHashLibrariesNotLinked();\n    error TooManySignups();\n    error InvalidPubKey();\n    error PreviousPollNotCompleted(uint256 pollId);\n    error PollDoesNotExist(uint256 pollId);\n    error SignupTemporaryBlocked();\n\n    /// @notice Create a new instance of the MACI contract.\n    /// @param _pollFactory The PollFactory contract\n    /// @param _messageProcessorFactory The MessageProcessorFactory contract\n    /// @param _tallyFactory The TallyFactory contract\n    /// @param _signUpGatekeeper The SignUpGatekeeper contract\n    /// @param _initialVoiceCreditProxy The InitialVoiceCreditProxy contract\n    /// @param _topupCredit The TopupCredit contract\n    /// @param _stateTreeDepth The depth of the state tree\n    constructor(\n        IPollFactory _pollFactory,\n        IMessageProcessorFactory _messageProcessorFactory,\n        ITallyFactory _tallyFactory,\n        SignUpGatekeeper _signUpGatekeeper,\n        InitialVoiceCreditProxy _initialVoiceCreditProxy,\n        TopupCredit _topupCredit,\n        uint8 _stateTreeDepth\n    ) payable {\n        // initialize and insert the blank leaf\n        InternalLazyIMT._init(lazyIMTData, _stateTreeDepth);\n        InternalLazyIMT._insert(lazyIMTData, BLANK_STATE_LEAF_HASH);\n\n        pollFactory = _pollFactory;\n        messageProcessorFactory = _messageProcessorFactory;\n        tallyFactory = _tallyFactory;\n        topupCredit = _topupCredit;\n        signUpGatekeeper = _signUpGatekeeper;\n        initialVoiceCreditProxy = _initialVoiceCreditProxy;\n        stateTreeDepth = _stateTreeDepth;\n\n        // Verify linked poseidon libraries\n        if (hash2([uint256(1), uint256(1)]) == 0)\n            revert PoseidonHashLibrariesNotLinked();\n    }\n\n    /// @notice Allows any eligible user sign up. The sign-up gatekeeper should prevent\n    /// double sign-ups or ineligible users from doing so.  This function will\n    /// only succeed if the sign-up deadline has not passed. It also enqueues a\n    /// fresh state leaf into the state AccQueue.\n    /// @param _pubKey The user's desired public key.\n    /// @param _signUpGatekeeperData Data to pass to the sign-up gatekeeper's\n    ///     register() function. For instance, the POAPGatekeeper or\n    ///     SignUpTokenGatekeeper requires this value to be the ABI-encoded\n    ///     token ID.\n    /// @param _initialVoiceCreditProxyData Data to pass to the\n    ///     InitialVoiceCreditProxy, which allows it to determine how many voice\n    ///     credits this user should have.\n    function signUp(\n        PubKey memory _pubKey,\n        bytes memory _signUpGatekeeperData,\n        bytes memory _initialVoiceCreditProxyData\n    ) public virtual {\n        // ensure we do not have more signups than what the circuits support\n        if (\n            lazyIMTData.numberOfLeaves >=\n            uint256(TREE_ARITY) ** uint256(stateTreeDepth)\n        ) revert TooManySignups();\n\n        // ensure that the public key is on the baby jubjub curve\n        if (!CurveBabyJubJub.isOnCurve(_pubKey.x, _pubKey.y)) {\n            revert InvalidPubKey();\n        }\n\n        // Register the user via the sign-up gatekeeper. This function should\n        // throw if the user has already registered or if ineligible to do so.\n        signUpGatekeeper.register(msg.sender, _signUpGatekeeperData);\n\n        // Get the user's voice credit balance.\n        uint256 voiceCreditBalance = initialVoiceCreditProxy.getVoiceCredits(\n            msg.sender,\n            _initialVoiceCreditProxyData\n        );\n\n        uint256 timestamp = block.timestamp;\n\n        // Create a state leaf and insert it into the tree.\n        uint256 stateLeaf = hashStateLeaf(\n            StateLeaf(_pubKey, voiceCreditBalance, timestamp)\n        );\n        InternalLazyIMT._insert(lazyIMTData, stateLeaf);\n\n        emit SignUp(\n            lazyIMTData.numberOfLeaves - 1,\n            _pubKey.x,\n            _pubKey.y,\n            voiceCreditBalance,\n            timestamp\n        );\n    }\n\n    /// @notice Deploy a new Poll contract.\n    /// @param _duration How long should the Poll last for\n    /// @param _treeDepths The depth of the Merkle trees\n    /// @param _coordinatorPubKey The coordinator's public key\n    /// @param _verifier The Verifier Contract\n    /// @param _vkRegistry The VkRegistry Contract\n    /// @param _mode Voting mode\n    /// @return pollAddr a new Poll contract address\n    function deployPoll(\n        uint256 _duration,\n        TreeDepths memory _treeDepths,\n        PubKey memory _coordinatorPubKey,\n        address _verifier,\n        address _vkRegistry,\n        Mode _mode\n    ) public virtual onlyOwner returns (PollContracts memory pollAddr) {\n        // cache the poll to a local variable so we can increment it\n        uint256 pollId = nextPollId;\n\n        // Increment the poll ID for the next poll\n        // 2 ** 256 polls available\n        unchecked {\n            nextPollId++;\n        }\n\n        // check coordinator key is a valid point on the curve\n        if (\n            !CurveBabyJubJub.isOnCurve(\n                _coordinatorPubKey.x,\n                _coordinatorPubKey.y\n            )\n        ) {\n            revert InvalidPubKey();\n        }\n\n        MaxValues memory maxValues = MaxValues({\n            maxMessages: uint256(MESSAGE_TREE_ARITY) **\n                _treeDepths.messageTreeDepth,\n            maxVoteOptions: uint256(MESSAGE_TREE_ARITY) **\n                _treeDepths.voteOptionTreeDepth\n        });\n\n        address _owner = owner();\n\n        address p = pollFactory.deploy(\n            _duration,\n            maxValues,\n            _treeDepths,\n            _coordinatorPubKey,\n            address(this),\n            topupCredit,\n            _owner\n        );\n\n        address mp = messageProcessorFactory.deploy(\n            _verifier,\n            _vkRegistry,\n            p,\n            _owner,\n            _mode\n        );\n        address tally = tallyFactory.deploy(\n            _verifier,\n            _vkRegistry,\n            p,\n            mp,\n            _owner,\n            _mode\n        );\n\n        polls[pollId] = p;\n\n        // store the addresses in a struct so they can be returned\n        pollAddr = PollContracts({poll: p, messageProcessor: mp, tally: tally});\n\n        emit DeployPoll(\n            pollId,\n            _coordinatorPubKey.x,\n            _coordinatorPubKey.y,\n            pollAddr\n        );\n    }\n\n    /// @inheritdoc IMACI\n    function getStateTreeRoot() public view returns (uint256 root) {\n        root = InternalLazyIMT._root(lazyIMTData);\n    }\n\n    /// @notice Get the Poll details\n    /// @param _pollId The identifier of the Poll to retrieve\n    /// @return poll The Poll contract object\n    function getPoll(uint256 _pollId) public view returns (address poll) {\n        if (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\n        poll = polls[_pollId];\n    }\n\n    /// @inheritdoc IMACI\n    function numSignUps() public view returns (uint256 signUps) {\n        signUps = lazyIMTData.numberOfLeaves;\n    }\n}\n"
    },
    "maci-contracts/contracts/MessageProcessor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {AccQueue} from \"./trees/AccQueue.sol\";\nimport {IMACI} from \"./interfaces/IMACI.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IPoll} from \"./interfaces/IPoll.sol\";\nimport {SnarkCommon} from \"./crypto/SnarkCommon.sol\";\nimport {Hasher} from \"./crypto/Hasher.sol\";\nimport {IVerifier} from \"./interfaces/IVerifier.sol\";\nimport {IVkRegistry} from \"./interfaces/IVkRegistry.sol\";\nimport {IMessageProcessor} from \"./interfaces/IMessageProcessor.sol\";\nimport {CommonUtilities} from \"./utilities/CommonUtilities.sol\";\nimport {DomainObjs} from \"./utilities/DomainObjs.sol\";\n\n/// @title MessageProcessor\n/// @dev MessageProcessor is used to process messages published by signup users.\n/// It will process message by batch due to large size of messages.\n/// After it finishes processing, the sbCommitment will be used for Tally and Subsidy contracts.\ncontract MessageProcessor is\n    Ownable,\n    SnarkCommon,\n    Hasher,\n    CommonUtilities,\n    IMessageProcessor,\n    DomainObjs\n{\n    /// @notice custom errors\n    error NoMoreMessages();\n    error StateAqNotMerged();\n    error MessageAqNotMerged();\n    error InvalidProcessMessageProof();\n    error VkNotSet();\n    error MaxVoteOptionsTooLarge();\n    error NumSignUpsTooLarge();\n    error CurrentMessageBatchIndexTooLarge();\n    error BatchEndIndexTooLarge();\n\n    // the number of children per node in the merkle trees\n    uint256 internal constant TREE_ARITY = 5;\n\n    /// @inheritdoc IMessageProcessor\n    bool public processingComplete;\n\n    /// @notice  The number of batches processed\n    uint256 public numBatchesProcessed;\n\n    /// @notice  The current message batch index. When the coordinator runs\n    /// processMessages(), this action relates to messages\n    /// currentMessageBatchIndex to currentMessageBatchIndex + messageBatchSize.\n    uint256 public currentMessageBatchIndex;\n\n    /// @inheritdoc IMessageProcessor\n    uint256 public sbCommitment;\n\n    IPoll public immutable poll;\n    IVerifier public immutable verifier;\n    IVkRegistry public immutable vkRegistry;\n    Mode public immutable mode;\n\n    /// @notice Create a new instance\n    /// @param _verifier The Verifier contract address\n    /// @param _vkRegistry The VkRegistry contract address\n    /// @param _poll The Poll contract address\n    /// @param _mode Voting mode\n    constructor(\n        address _verifier,\n        address _vkRegistry,\n        address _poll,\n        Mode _mode\n    ) payable {\n        verifier = IVerifier(_verifier);\n        vkRegistry = IVkRegistry(_vkRegistry);\n        poll = IPoll(_poll);\n        mode = _mode;\n    }\n\n    /// @notice Update the Poll's currentSbCommitment if the proof is valid.\n    /// @param _newSbCommitment The new state root and ballot root commitment\n    ///                         after all messages are processed\n    /// @param _proof The zk-SNARK proof\n    function processMessages(\n        uint256 _newSbCommitment,\n        uint256[8] memory _proof\n    ) external onlyOwner {\n        // ensure the voting period is over\n        _votingPeriodOver(poll);\n\n        // There must be unprocessed messages\n        if (processingComplete) {\n            revert NoMoreMessages();\n        }\n\n        // The state AccQueue must be merged\n        if (!poll.stateAqMerged()) {\n            revert StateAqNotMerged();\n        }\n\n        // Retrieve stored vals\n        (\n            ,\n            uint8 messageTreeSubDepth,\n            uint8 messageTreeDepth,\n            uint8 voteOptionTreeDepth\n        ) = poll.treeDepths();\n        // calculate the message batch size from the message tree subdepth\n        uint256 messageBatchSize = TREE_ARITY ** messageTreeSubDepth;\n\n        (, AccQueue messageAq, ) = poll.extContracts();\n\n        // Require that the message queue has been merged\n        uint256 messageRoot = messageAq.getMainRoot(messageTreeDepth);\n        if (messageRoot == 0) {\n            revert MessageAqNotMerged();\n        }\n\n        // Copy the state and ballot commitment and set the batch index if this\n        // is the first batch to process\n        if (numBatchesProcessed == 0) {\n            uint256 currentSbCommitment = poll.currentSbCommitment();\n            sbCommitment = currentSbCommitment;\n            (, uint256 numMessages) = poll.numSignUpsAndMessages();\n            uint256 r = numMessages % messageBatchSize;\n\n            currentMessageBatchIndex = numMessages;\n\n            if (currentMessageBatchIndex > 0) {\n                if (r == 0) {\n                    currentMessageBatchIndex -= messageBatchSize;\n                } else {\n                    currentMessageBatchIndex -= r;\n                }\n            }\n        }\n\n        if (\n            !verifyProcessProof(\n                currentMessageBatchIndex,\n                messageRoot,\n                sbCommitment,\n                _newSbCommitment,\n                messageTreeSubDepth,\n                messageTreeDepth,\n                voteOptionTreeDepth,\n                _proof\n            )\n        ) {\n            revert InvalidProcessMessageProof();\n        }\n\n        {\n            (, uint256 numMessages) = poll.numSignUpsAndMessages();\n            // Decrease the message batch start index to ensure that each\n            // message batch is processed in order\n            if (currentMessageBatchIndex > 0) {\n                currentMessageBatchIndex -= messageBatchSize;\n            }\n\n            updateMessageProcessingData(\n                _newSbCommitment,\n                currentMessageBatchIndex,\n                numMessages <= messageBatchSize * (numBatchesProcessed + 1)\n            );\n        }\n    }\n\n    /// @notice Verify the proof for processMessage\n    /// @dev used to update the sbCommitment\n    /// @param _currentMessageBatchIndex The batch index of current message batch\n    /// @param _messageRoot The message tree root\n    /// @param _currentSbCommitment The current sbCommitment (state and ballot)\n    /// @param _newSbCommitment The new sbCommitment after we update this message batch\n    /// @param _messageTreeSubDepth The message tree subdepth\n    /// @param _messageTreeDepth The message tree depth\n    /// @param _voteOptionTreeDepth The vote option tree depth\n    /// @param _proof The zk-SNARK proof\n    /// @return isValid Whether the proof is valid\n    function verifyProcessProof(\n        uint256 _currentMessageBatchIndex,\n        uint256 _messageRoot,\n        uint256 _currentSbCommitment,\n        uint256 _newSbCommitment,\n        uint8 _messageTreeSubDepth,\n        uint8 _messageTreeDepth,\n        uint8 _voteOptionTreeDepth,\n        uint256[8] memory _proof\n    ) internal view returns (bool isValid) {\n        // get the tree depths\n        // get the message batch size from the message tree subdepth\n        // get the number of signups\n        (uint256 numSignUps, uint256 numMessages) = poll\n            .numSignUpsAndMessages();\n        (IMACI maci, , ) = poll.extContracts();\n\n        // Calculate the public input hash (a SHA256 hash of several values)\n        uint256 publicInputHash = genProcessMessagesPublicInputHash(\n            _currentMessageBatchIndex,\n            _messageRoot,\n            numSignUps,\n            numMessages,\n            _currentSbCommitment,\n            _newSbCommitment,\n            _messageTreeSubDepth,\n            _voteOptionTreeDepth\n        );\n\n        // Get the verifying key from the VkRegistry\n        VerifyingKey memory vk = vkRegistry.getProcessVk(\n            maci.stateTreeDepth(),\n            _messageTreeDepth,\n            _voteOptionTreeDepth,\n            TREE_ARITY ** _messageTreeSubDepth,\n            mode\n        );\n\n        isValid = verifier.verify(_proof, vk, publicInputHash);\n    }\n\n    /// @notice Returns the SHA256 hash of the packed values (see\n    /// genProcessMessagesPackedVals), the hash of the coordinator's public key,\n    /// the message root, and the commitment to the current state root and\n    /// ballot root. By passing the SHA256 hash of these values to the circuit\n    /// as a single public input and the preimage as private inputs, we reduce\n    /// its verification gas cost though the number of constraints will be\n    /// higher and proving time will be longer.\n    /// @param _currentMessageBatchIndex The batch index of current message batch\n    /// @param _numSignUps The number of users that signup\n    /// @param _numMessages The number of messages\n    /// @param _currentSbCommitment The current sbCommitment (state and ballot root)\n    /// @param _newSbCommitment The new sbCommitment after we update this message batch\n    /// @param _messageTreeSubDepth The message tree subdepth\n    /// @return inputHash Returns the SHA256 hash of the packed values\n    function genProcessMessagesPublicInputHash(\n        uint256 _currentMessageBatchIndex,\n        uint256 _messageRoot,\n        uint256 _numSignUps,\n        uint256 _numMessages,\n        uint256 _currentSbCommitment,\n        uint256 _newSbCommitment,\n        uint8 _messageTreeSubDepth,\n        uint8 _voteOptionTreeDepth\n    ) public view returns (uint256 inputHash) {\n        uint256 coordinatorPubKeyHash = poll.coordinatorPubKeyHash();\n\n        uint8 actualStateTreeDepth = poll.actualStateTreeDepth();\n\n        // pack the values\n        uint256 packedVals = genProcessMessagesPackedVals(\n            _currentMessageBatchIndex,\n            _numSignUps,\n            _numMessages,\n            _messageTreeSubDepth,\n            _voteOptionTreeDepth\n        );\n\n        (uint256 deployTime, uint256 duration) = poll\n            .getDeployTimeAndDuration();\n\n        // generate the circuit only public input\n        uint256[] memory input = new uint256[](7);\n        input[0] = packedVals;\n        input[1] = coordinatorPubKeyHash;\n        input[2] = _messageRoot;\n        input[3] = _currentSbCommitment;\n        input[4] = _newSbCommitment;\n        input[5] = deployTime + duration;\n        input[6] = actualStateTreeDepth;\n        inputHash = sha256Hash(input);\n    }\n\n    /// @notice One of the inputs to the ProcessMessages circuit is a 250-bit\n    /// representation of four 50-bit values. This function generates this\n    /// 250-bit value, which consists of the maximum number of vote options, the\n    /// number of signups, the current message batch index, and the end index of\n    /// the current batch.\n    /// @param _currentMessageBatchIndex batch index of current message batch\n    /// @param _numSignUps number of users that signup\n    /// @param _numMessages number of messages\n    /// @param _messageTreeSubDepth message tree subdepth\n    /// @param _voteOptionTreeDepth vote option tree depth\n    /// @return result The packed value\n    function genProcessMessagesPackedVals(\n        uint256 _currentMessageBatchIndex,\n        uint256 _numSignUps,\n        uint256 _numMessages,\n        uint8 _messageTreeSubDepth,\n        uint8 _voteOptionTreeDepth\n    ) public pure returns (uint256 result) {\n        uint256 maxVoteOptions = TREE_ARITY ** _voteOptionTreeDepth;\n\n        // calculate the message batch size from the message tree subdepth\n        uint256 messageBatchSize = TREE_ARITY ** _messageTreeSubDepth;\n        uint256 batchEndIndex = _currentMessageBatchIndex + messageBatchSize;\n        if (batchEndIndex > _numMessages) {\n            batchEndIndex = _numMessages;\n        }\n\n        if (maxVoteOptions >= 2 ** 50) revert MaxVoteOptionsTooLarge();\n        if (_numSignUps >= 2 ** 50) revert NumSignUpsTooLarge();\n        if (_currentMessageBatchIndex >= 2 ** 50)\n            revert CurrentMessageBatchIndexTooLarge();\n        if (batchEndIndex >= 2 ** 50) revert BatchEndIndexTooLarge();\n\n        result =\n            maxVoteOptions +\n            (_numSignUps << 50) +\n            (_currentMessageBatchIndex << 100) +\n            (batchEndIndex << 150);\n    }\n\n    /// @notice update message processing state variables\n    /// @param _newSbCommitment sbCommitment to be updated\n    /// @param _currentMessageBatchIndex currentMessageBatchIndex to be updated\n    /// @param _processingComplete update flag that indicate processing is finished or not\n    function updateMessageProcessingData(\n        uint256 _newSbCommitment,\n        uint256 _currentMessageBatchIndex,\n        bool _processingComplete\n    ) internal {\n        sbCommitment = _newSbCommitment;\n        processingComplete = _processingComplete;\n        currentMessageBatchIndex = _currentMessageBatchIndex;\n        numBatchesProcessed++;\n    }\n}\n"
    },
    "maci-contracts/contracts/MessageProcessorFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { Params } from \"./utilities/Params.sol\";\nimport { DomainObjs } from \"./utilities/DomainObjs.sol\";\nimport { MessageProcessor } from \"./MessageProcessor.sol\";\nimport { IMessageProcessorFactory } from \"./interfaces/IMPFactory.sol\";\n\n/// @title MessageProcessorFactory\n/// @notice A factory contract which deploys MessageProcessor contracts.\ncontract MessageProcessorFactory is Params, DomainObjs, IMessageProcessorFactory {\n  /// @inheritdoc IMessageProcessorFactory\n  function deploy(\n    address _verifier,\n    address _vkRegistry,\n    address _poll,\n    address _owner,\n    Mode _mode\n  ) public returns (address messageProcessorAddr) {\n    // deploy MessageProcessor for this Poll\n    MessageProcessor messageProcessor = new MessageProcessor(_verifier, _vkRegistry, _poll, _mode);\n    messageProcessor.transferOwnership(_owner);\n    messageProcessorAddr = address(messageProcessor);\n  }\n}\n"
    },
    "maci-contracts/contracts/Poll.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {Params} from \"./utilities/Params.sol\";\nimport {SnarkCommon} from \"./crypto/SnarkCommon.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {EmptyBallotRoots} from \"./trees/EmptyBallotRoots.sol\";\nimport {IPoll} from \"./interfaces/IPoll.sol\";\nimport {Utilities} from \"./utilities/Utilities.sol\";\nimport {CurveBabyJubJub} from \"./crypto/BabyJubJub.sol\";\n\n/// @title Poll\n/// @notice A Poll contract allows voters to submit encrypted messages\n/// which can be either votes, key change messages or topup messages.\n/// @dev Do not deploy this directly. Use PollFactory.deploy() which performs some\n/// checks on the Poll constructor arguments.\ncontract Poll is\n    Params,\n    Utilities,\n    SnarkCommon,\n    Ownable,\n    EmptyBallotRoots,\n    IPoll\n{\n    using SafeERC20 for ERC20;\n\n    /// @notice Whether the Poll has been initialized\n    bool internal isInit;\n\n    /// @notice The coordinator's public key\n    PubKey public coordinatorPubKey;\n\n    /// @notice Hash of the coordinator's public key\n    uint256 public immutable coordinatorPubKeyHash;\n\n    /// @notice the state root of the state merkle tree\n    uint256 public mergedStateRoot;\n\n    // The timestamp of the block at which the Poll was deployed\n    uint256 internal immutable deployTime;\n\n    // The duration of the polling period, in seconds\n    uint256 internal immutable duration;\n\n    /// @notice Whether the MACI contract's stateAq has been merged by this contract\n    bool public stateAqMerged;\n\n    /// @notice Get the commitment to the state leaves and the ballots. This is\n    /// hash3(stateRoot, ballotRoot, salt).\n    /// Its initial value should be\n    /// hash(maciStateRootSnapshot, emptyBallotRoot, 0)\n    /// Each successful invocation of processMessages() should use a different\n    /// salt to update this value, so that an external observer cannot tell in\n    /// the case that none of the messages are valid.\n    uint256 public currentSbCommitment;\n\n    /// @notice The number of messages that have been published\n    uint256 public numMessages;\n\n    /// @notice The number of signups that have been processed\n    /// before the Poll ended (stateAq merged)\n    uint256 public numSignups;\n\n    /// @notice The actual depth of the state tree\n    /// to be used as public input for the circuit\n    uint8 public actualStateTreeDepth;\n\n    /// @notice Max values for the poll\n    MaxValues public maxValues;\n\n    /// @notice Depths of the merkle trees\n    TreeDepths public treeDepths;\n\n    /// @notice The contracts used by the Poll\n    ExtContracts public extContracts;\n\n    error VotingPeriodOver();\n    error VotingPeriodNotOver();\n    error PollAlreadyInit();\n    error TooManyMessages();\n    error InvalidPubKey();\n    error StateAqAlreadyMerged();\n    error StateAqSubtreesNeedMerge();\n    error InvalidBatchLength();\n\n    event PublishMessage(Message _message, PubKey _encPubKey);\n    event TopupMessage(Message _message);\n    event MergeMaciStateAqSubRoots(uint256 indexed _numSrQueueOps);\n    event MergeMaciStateAq(\n        uint256 indexed _stateRoot,\n        uint256 indexed _numSignups\n    );\n    event MergeMessageAqSubRoots(uint256 indexed _numSrQueueOps);\n    event MergeMessageAq(uint256 indexed _messageRoot);\n\n    /// @notice Each MACI instance can have multiple Polls.\n    /// When a Poll is deployed, its voting period starts immediately.\n    /// @param _duration The duration of the voting period, in seconds\n    /// @param _maxValues The maximum number of messages and vote options\n    /// @param _treeDepths The depths of the merkle trees\n    /// @param _coordinatorPubKey The coordinator's public key\n    /// @param _extContracts The external contracts\n    constructor(\n        uint256 _duration,\n        MaxValues memory _maxValues,\n        TreeDepths memory _treeDepths,\n        PubKey memory _coordinatorPubKey,\n        ExtContracts memory _extContracts\n    ) payable {\n        // check that the coordinator public key is valid\n        if (\n            !CurveBabyJubJub.isOnCurve(\n                _coordinatorPubKey.x,\n                _coordinatorPubKey.y\n            )\n        ) {\n            revert InvalidPubKey();\n        }\n\n        // store the pub key as object then calculate the hash\n        coordinatorPubKey = _coordinatorPubKey;\n        // we hash it ourselves to ensure we store the correct value\n        coordinatorPubKeyHash = hashLeftRight(\n            _coordinatorPubKey.x,\n            _coordinatorPubKey.y\n        );\n        // store the external contracts to interact with\n        extContracts = _extContracts;\n        // store duration of the poll\n        duration = _duration;\n        // store max values\n        maxValues = _maxValues;\n        // store tree depth\n        treeDepths = _treeDepths;\n        // Record the current timestamp\n        deployTime = block.timestamp;\n    }\n\n    /// @notice A modifier that causes the function to revert if the voting period is\n    /// not over.\n    modifier isAfterVotingDeadline() {\n        uint256 secondsPassed = block.timestamp - deployTime;\n        if (secondsPassed <= duration) revert VotingPeriodNotOver();\n        _;\n    }\n\n    /// @notice A modifier that causes the function to revert if the voting period is\n    /// over\n    modifier isWithinVotingDeadline() {\n        uint256 secondsPassed = block.timestamp - deployTime;\n        if (secondsPassed >= duration) revert VotingPeriodOver();\n        _;\n    }\n\n    /// @notice The initialization function.\n    /// @dev Should be called immediately after Poll creation\n    /// and messageAq ownership transferred\n    function init() public {\n        if (isInit) revert PollAlreadyInit();\n        // set to true so it cannot be called again\n        isInit = true;\n\n        unchecked {\n            numMessages++;\n        }\n\n        // init messageAq here by inserting placeholderLeaf\n        uint256[2] memory dat;\n        dat[0] = NOTHING_UP_MY_SLEEVE;\n        dat[1] = 0;\n\n        (\n            Message memory _message,\n            PubKey memory _padKey,\n            uint256 placeholderLeaf\n        ) = padAndHashMessage(dat, 1);\n        extContracts.messageAq.enqueue(placeholderLeaf);\n\n        emit PublishMessage(_message, _padKey);\n    }\n\n    /// @inheritdoc IPoll\n    function topup(\n        uint256 stateIndex,\n        uint256 amount\n    ) public virtual isWithinVotingDeadline {\n        // we check that we do not exceed the max number of messages\n        if (numMessages >= maxValues.maxMessages) revert TooManyMessages();\n\n        // cannot realistically overflow\n        unchecked {\n            numMessages++;\n        }\n\n        /// @notice topupCredit is a trusted token contract which reverts if the transfer fails\n        extContracts.topupCredit.transferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n\n        uint256[2] memory dat;\n        dat[0] = stateIndex;\n        dat[1] = amount;\n\n        (Message memory _message, , uint256 messageLeaf) = padAndHashMessage(\n            dat,\n            2\n        );\n\n        extContracts.messageAq.enqueue(messageLeaf);\n\n        emit TopupMessage(_message);\n    }\n\n    /// @inheritdoc IPoll\n    function publishMessage(\n        Message memory _message,\n        PubKey calldata _encPubKey\n    ) public virtual isWithinVotingDeadline {\n        // we check that we do not exceed the max number of messages\n        if (numMessages >= maxValues.maxMessages) revert TooManyMessages();\n\n        // check if the public key is on the curve\n        if (!CurveBabyJubJub.isOnCurve(_encPubKey.x, _encPubKey.y)) {\n            revert InvalidPubKey();\n        }\n\n        // cannot realistically overflow\n        unchecked {\n            numMessages++;\n        }\n\n        // we enforce that msgType here is 1 so we don't need checks\n        // at the circuit level\n        _message.msgType = 1;\n\n        uint256 messageLeaf = hashMessageAndEncPubKey(_message, _encPubKey);\n        extContracts.messageAq.enqueue(messageLeaf);\n\n        emit PublishMessage(_message, _encPubKey);\n    }\n\n    /// @notice submit a message batch\n    /// @dev Can only be submitted before the voting deadline\n    /// @param _messages the messages\n    /// @param _encPubKeys the encrypted public keys\n    function publishMessageBatch(\n        Message[] calldata _messages,\n        PubKey[] calldata _encPubKeys\n    ) external {\n        if (_messages.length != _encPubKeys.length) {\n            revert InvalidBatchLength();\n        }\n\n        uint256 len = _messages.length;\n        for (uint256 i = 0; i < len; ) {\n            // an event will be published by this function already\n            publishMessage(_messages[i], _encPubKeys[i]);\n\n            unchecked {\n                i++;\n            }\n        }\n    }\n\n    /// @inheritdoc IPoll\n    function mergeMaciStateAq() public onlyOwner isAfterVotingDeadline {\n        // This function can only be called once per Poll after the voting\n        // deadline\n        if (stateAqMerged) revert StateAqAlreadyMerged();\n\n        // set merged to true so it cannot be called again\n        stateAqMerged = true;\n\n        mergedStateRoot = extContracts.maci.getStateTreeRoot();\n\n        // Set currentSbCommitment\n        uint256[3] memory sb;\n        sb[0] = mergedStateRoot;\n        sb[1] = emptyBallotRoots[treeDepths.voteOptionTreeDepth - 1];\n        sb[2] = uint256(0);\n\n        currentSbCommitment = hash3(sb);\n\n        // get number of signups and cache in a var for later use\n        uint256 _numSignups = extContracts.maci.numSignUps();\n        numSignups = _numSignups;\n\n        // dynamically determine the actual depth of the state tree\n        uint8 depth = 1;\n        while (uint40(2) ** uint40(depth) < _numSignups) {\n            depth++;\n        }\n\n        actualStateTreeDepth = depth;\n\n        emit MergeMaciStateAq(mergedStateRoot, numSignups);\n    }\n\n    /// @inheritdoc IPoll\n    function mergeMessageAqSubRoots(\n        uint256 _numSrQueueOps\n    ) public onlyOwner isAfterVotingDeadline {\n        extContracts.messageAq.mergeSubRoots(_numSrQueueOps);\n        emit MergeMessageAqSubRoots(_numSrQueueOps);\n    }\n\n    /// @inheritdoc IPoll\n    function mergeMessageAq() public onlyOwner isAfterVotingDeadline {\n        uint256 root = extContracts.messageAq.merge(\n            treeDepths.messageTreeDepth\n        );\n        emit MergeMessageAq(root);\n    }\n\n    /// @inheritdoc IPoll\n    function getDeployTimeAndDuration()\n        public\n        view\n        returns (uint256 pollDeployTime, uint256 pollDuration)\n    {\n        pollDeployTime = deployTime;\n        pollDuration = duration;\n    }\n\n    /// @inheritdoc IPoll\n    function numSignUpsAndMessages()\n        public\n        view\n        returns (uint256 numSUps, uint256 numMsgs)\n    {\n        numSUps = numSignups;\n        numMsgs = numMessages;\n    }\n}\n"
    },
    "maci-contracts/contracts/PollFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IMACI } from \"./interfaces/IMACI.sol\";\nimport { AccQueue } from \"./trees/AccQueue.sol\";\nimport { AccQueueQuinaryMaci } from \"./trees/AccQueueQuinaryMaci.sol\";\nimport { TopupCredit } from \"./TopupCredit.sol\";\nimport { Params } from \"./utilities/Params.sol\";\nimport { DomainObjs } from \"./utilities/DomainObjs.sol\";\nimport { Poll } from \"./Poll.sol\";\nimport { IPollFactory } from \"./interfaces/IPollFactory.sol\";\n\n/// @title PollFactory\n/// @notice A factory contract which deploys Poll contracts. It allows the MACI contract\n/// size to stay within the limit set by EIP-170.\ncontract PollFactory is Params, DomainObjs, IPollFactory {\n  // The number of children each node in the message tree has\n  uint256 internal constant TREE_ARITY = 5;\n\n  // custom error\n  error InvalidMaxValues();\n\n  /// @notice The PollFactory constructor\n  // solhint-disable-next-line no-empty-blocks\n  constructor() payable {}\n\n  /// @inheritdoc IPollFactory\n  function deploy(\n    uint256 _duration,\n    MaxValues calldata _maxValues,\n    TreeDepths calldata _treeDepths,\n    PubKey calldata _coordinatorPubKey,\n    address _maci,\n    TopupCredit _topupCredit,\n    address _pollOwner\n  ) public virtual returns (address pollAddr) {\n    /// @notice Validate _maxValues\n    /// maxVoteOptions must be less than 2 ** 50 due to circuit limitations;\n    /// it will be packed as a 50-bit value along with other values as one\n    /// of the inputs (aka packedVal)\n    if (_maxValues.maxVoteOptions >= (2 ** 50)) {\n      revert InvalidMaxValues();\n    }\n\n    /// @notice deploy a new AccQueue contract to store messages\n    AccQueue messageAq = new AccQueueQuinaryMaci(_treeDepths.messageTreeSubDepth);\n\n    /// @notice the smart contracts that a Poll would interact with\n    ExtContracts memory extContracts = ExtContracts({\n      maci: IMACI(_maci),\n      messageAq: messageAq,\n      topupCredit: _topupCredit\n    });\n\n    // deploy the poll\n    Poll poll = new Poll(_duration, _maxValues, _treeDepths, _coordinatorPubKey, extContracts);\n\n    // Make the Poll contract own the messageAq contract, so only it can\n    // run enqueue/merge\n    messageAq.transferOwnership(address(poll));\n\n    // init Poll\n    poll.init();\n\n    poll.transferOwnership(_pollOwner);\n\n    pollAddr = address(poll);\n  }\n}\n"
    },
    "maci-contracts/contracts/Tally.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {IMACI} from \"./interfaces/IMACI.sol\";\nimport {Hasher} from \"./crypto/Hasher.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IPoll} from \"./interfaces/IPoll.sol\";\nimport {IMessageProcessor} from \"./interfaces/IMessageProcessor.sol\";\nimport {SnarkCommon} from \"./crypto/SnarkCommon.sol\";\nimport {IVerifier} from \"./interfaces/IVerifier.sol\";\nimport {IVkRegistry} from \"./interfaces/IVkRegistry.sol\";\nimport {CommonUtilities} from \"./utilities/CommonUtilities.sol\";\nimport {DomainObjs} from \"./utilities/DomainObjs.sol\";\n\n/// @title Tally\n/// @notice The Tally contract is used during votes tallying\n/// and by users to verify the tally results.\ncontract Tally is Ownable, SnarkCommon, CommonUtilities, Hasher, DomainObjs {\n    uint256 internal constant TREE_ARITY = 2;\n    uint256 internal constant VOTE_OPTION_TREE_ARITY = 5;\n\n    /// @notice The commitment to the tally results. Its initial value is 0, but after\n    /// the tally of each batch is proven on-chain via a zk-SNARK, it should be\n    /// updated to:\n    ///\n    /// QV:\n    /// hash3(\n    ///   hashLeftRight(merkle root of current results, salt0)\n    ///   hashLeftRight(number of spent voice credits, salt1),\n    ///   hashLeftRight(merkle root of the no. of spent voice credits per vote option, salt2)\n    /// )\n    ///\n    /// Non-QV:\n    /// hash2(\n    ///   hashLeftRight(merkle root of current results, salt0)\n    ///   hashLeftRight(number of spent voice credits, salt1),\n    /// )\n    ///\n    /// Where each salt is unique and the merkle roots are of arrays of leaves\n    /// TREE_ARITY ** voteOptionTreeDepth long.\n    uint256 public tallyCommitment;\n\n    uint256 public tallyBatchNum;\n\n    // The final commitment to the state and ballot roots\n    uint256 public sbCommitment;\n\n    IVerifier public immutable verifier;\n    IVkRegistry public immutable vkRegistry;\n    IPoll public immutable poll;\n    IMessageProcessor public immutable messageProcessor;\n    Mode public immutable mode;\n\n    /// @notice custom errors\n    error ProcessingNotComplete();\n    error InvalidTallyVotesProof();\n    error AllBallotsTallied();\n    error NumSignUpsTooLarge();\n    error BatchStartIndexTooLarge();\n    error TallyBatchSizeTooLarge();\n    error NotSupported();\n\n    /// @notice Create a new Tally contract\n    /// @param _verifier The Verifier contract\n    /// @param _vkRegistry The VkRegistry contract\n    /// @param _poll The Poll contract\n    /// @param _mp The MessageProcessor contract\n    constructor(\n        address _verifier,\n        address _vkRegistry,\n        address _poll,\n        address _mp,\n        Mode _mode\n    ) payable {\n        verifier = IVerifier(_verifier);\n        vkRegistry = IVkRegistry(_vkRegistry);\n        poll = IPoll(_poll);\n        messageProcessor = IMessageProcessor(_mp);\n        mode = _mode;\n    }\n\n    /// @notice Pack the batch start index and number of signups into a 100-bit value.\n    /// @param _numSignUps: number of signups\n    /// @param _batchStartIndex: the start index of given batch\n    /// @param _tallyBatchSize: size of batch\n    /// @return result an uint256 representing the 3 inputs packed together\n    function genTallyVotesPackedVals(\n        uint256 _numSignUps,\n        uint256 _batchStartIndex,\n        uint256 _tallyBatchSize\n    ) public pure returns (uint256 result) {\n        if (_numSignUps >= 2 ** 50) revert NumSignUpsTooLarge();\n        if (_batchStartIndex >= 2 ** 50) revert BatchStartIndexTooLarge();\n        if (_tallyBatchSize >= 2 ** 50) revert TallyBatchSizeTooLarge();\n\n        result =\n            (_batchStartIndex / _tallyBatchSize) +\n            (_numSignUps << uint256(50));\n    }\n\n    /// @notice Check if all ballots are tallied\n    /// @return tallied whether all ballots are tallied\n    function isTallied() public view returns (bool tallied) {\n        (uint8 intStateTreeDepth, , , ) = poll.treeDepths();\n        (uint256 numSignUps, ) = poll.numSignUpsAndMessages();\n\n        // Require that there are untallied ballots left\n        tallied =\n            tallyBatchNum * (TREE_ARITY ** intStateTreeDepth) >= numSignUps;\n    }\n\n    /// @notice generate hash of public inputs for tally circuit\n    /// @param _numSignUps: number of signups\n    /// @param _batchStartIndex: the start index of given batch\n    /// @param _tallyBatchSize: size of batch\n    /// @param _newTallyCommitment: the new tally commitment to be updated\n    /// @return inputHash hash of public inputs\n    function genTallyVotesPublicInputHash(\n        uint256 _numSignUps,\n        uint256 _batchStartIndex,\n        uint256 _tallyBatchSize,\n        uint256 _newTallyCommitment\n    ) public view returns (uint256 inputHash) {\n        uint256 packedVals = genTallyVotesPackedVals(\n            _numSignUps,\n            _batchStartIndex,\n            _tallyBatchSize\n        );\n        uint256[] memory input = new uint256[](4);\n        input[0] = packedVals;\n        input[1] = sbCommitment;\n        input[2] = tallyCommitment;\n        input[3] = _newTallyCommitment;\n        inputHash = sha256Hash(input);\n    }\n\n    /// @notice Update the state and ballot root commitment\n    function updateSbCommitment() public onlyOwner {\n        // Require that all messages have been processed\n        if (!messageProcessor.processingComplete()) {\n            revert ProcessingNotComplete();\n        }\n\n        if (sbCommitment == 0) {\n            sbCommitment = messageProcessor.sbCommitment();\n        }\n    }\n\n    /// @notice Verify the result of a tally batch\n    /// @param _newTallyCommitment the new tally commitment to be verified\n    /// @param _proof the proof generated after tallying this batch\n    function tallyVotes(\n        uint256 _newTallyCommitment,\n        uint256[8] calldata _proof\n    ) public onlyOwner {\n        _votingPeriodOver(poll);\n        updateSbCommitment();\n\n        // get the batch size and start index\n        (uint8 intStateTreeDepth, , , ) = poll.treeDepths();\n        uint256 tallyBatchSize = TREE_ARITY ** intStateTreeDepth;\n        uint256 batchStartIndex = tallyBatchNum * tallyBatchSize;\n\n        // save some gas because we won't overflow uint256\n        unchecked {\n            tallyBatchNum++;\n        }\n\n        (uint256 numSignUps, ) = poll.numSignUpsAndMessages();\n\n        // Require that there are untallied ballots left\n        if (batchStartIndex >= numSignUps) {\n            revert AllBallotsTallied();\n        }\n\n        bool isValid = verifyTallyProof(\n            _proof,\n            numSignUps,\n            batchStartIndex,\n            tallyBatchSize,\n            _newTallyCommitment\n        );\n\n        if (!isValid) {\n            revert InvalidTallyVotesProof();\n        }\n\n        // Update the tally commitment and the tally batch num\n        tallyCommitment = _newTallyCommitment;\n    }\n\n    /// @notice Verify the tally proof using the verifying key\n    /// @param _proof the proof generated after processing all messages\n    /// @param _numSignUps number of signups for a given poll\n    /// @param _batchStartIndex the number of batches multiplied by the size of the batch\n    /// @param _tallyBatchSize batch size for the tally\n    /// @param _newTallyCommitment the tally commitment to be verified at a given batch index\n    /// @return isValid whether the proof is valid\n    function verifyTallyProof(\n        uint256[8] calldata _proof,\n        uint256 _numSignUps,\n        uint256 _batchStartIndex,\n        uint256 _tallyBatchSize,\n        uint256 _newTallyCommitment\n    ) public view returns (bool isValid) {\n        (uint8 intStateTreeDepth, , , uint8 voteOptionTreeDepth) = poll\n            .treeDepths();\n\n        (IMACI maci, , ) = poll.extContracts();\n\n        // Get the verifying key\n        VerifyingKey memory vk = vkRegistry.getTallyVk(\n            maci.stateTreeDepth(),\n            intStateTreeDepth,\n            voteOptionTreeDepth,\n            mode\n        );\n\n        // Get the public inputs\n        uint256 publicInputHash = genTallyVotesPublicInputHash(\n            _numSignUps,\n            _batchStartIndex,\n            _tallyBatchSize,\n            _newTallyCommitment\n        );\n\n        // Verify the proof\n        isValid = verifier.verify(_proof, vk, publicInputHash);\n    }\n\n    /// @notice Compute the merkle root from the path elements\n    /// and a leaf\n    /// @param _depth the depth of the merkle tree\n    /// @param _index the index of the leaf\n    /// @param _leaf the leaf\n    /// @param _pathElements the path elements to reconstruct the merkle root\n    /// @return current The merkle root\n    function computeMerkleRootFromPath(\n        uint8 _depth,\n        uint256 _index,\n        uint256 _leaf,\n        uint256[][] calldata _pathElements\n    ) internal pure returns (uint256 current) {\n        uint256 pos = _index % VOTE_OPTION_TREE_ARITY;\n        current = _leaf;\n        uint8 k;\n\n        uint256[VOTE_OPTION_TREE_ARITY] memory level;\n\n        for (uint8 i = 0; i < _depth; ++i) {\n            for (uint8 j = 0; j < VOTE_OPTION_TREE_ARITY; ++j) {\n                if (j == pos) {\n                    level[j] = current;\n                } else {\n                    if (j > pos) {\n                        k = j - 1;\n                    } else {\n                        k = j;\n                    }\n                    level[j] = _pathElements[i][k];\n                }\n            }\n\n            _index /= VOTE_OPTION_TREE_ARITY;\n            pos = _index % VOTE_OPTION_TREE_ARITY;\n            current = hash5(level);\n        }\n    }\n\n    /// @notice Verify the number of spent voice credits from the tally.json\n    /// @param _totalSpent spent field retrieved in the totalSpentVoiceCredits object\n    /// @param _totalSpentSalt the corresponding salt in the totalSpentVoiceCredit object\n    /// @param _resultCommitment hashLeftRight(merkle root of the results.tally, results.salt) in tally.json file\n    /// @param _perVOSpentVoiceCreditsHash only for QV - hashLeftRight(merkle root of the no spent voice credits, salt)\n    /// @return isValid Whether the provided values are valid\n    function verifySpentVoiceCredits(\n        uint256 _totalSpent,\n        uint256 _totalSpentSalt,\n        uint256 _resultCommitment,\n        uint256 _perVOSpentVoiceCreditsHash\n    ) public view returns (bool isValid) {\n        uint256[3] memory tally;\n        tally[0] = _resultCommitment;\n        tally[1] = hashLeftRight(_totalSpent, _totalSpentSalt);\n        tally[2] = _perVOSpentVoiceCreditsHash;\n\n        if (mode == Mode.QV) {\n            isValid = verifyQvSpentVoiceCredits(\n                _totalSpent,\n                _totalSpentSalt,\n                _resultCommitment,\n                _perVOSpentVoiceCreditsHash\n            );\n        } else if (mode == Mode.NON_QV) {\n            isValid = verifyNonQvSpentVoiceCredits(\n                _totalSpent,\n                _totalSpentSalt,\n                _resultCommitment\n            );\n        }\n    }\n\n    /// @notice Verify the number of spent voice credits for QV from the tally.json\n    /// @param _totalSpent spent field retrieved in the totalSpentVoiceCredits object\n    /// @param _totalSpentSalt the corresponding salt in the totalSpentVoiceCredit object\n    /// @param _resultCommitment hashLeftRight(merkle root of the results.tally, results.salt) in tally.json file\n    /// @param _perVOSpentVoiceCreditsHash hashLeftRight(merkle root of the no spent voice credits per vote option, salt)\n    /// @return isValid Whether the provided values are valid\n    function verifyQvSpentVoiceCredits(\n        uint256 _totalSpent,\n        uint256 _totalSpentSalt,\n        uint256 _resultCommitment,\n        uint256 _perVOSpentVoiceCreditsHash\n    ) internal view returns (bool isValid) {\n        uint256[3] memory tally;\n        tally[0] = _resultCommitment;\n        tally[1] = hashLeftRight(_totalSpent, _totalSpentSalt);\n        tally[2] = _perVOSpentVoiceCreditsHash;\n\n        isValid = hash3(tally) == tallyCommitment;\n    }\n\n    /// @notice Verify the number of spent voice credits for Non-QV from the tally.json\n    /// @param _totalSpent spent field retrieved in the totalSpentVoiceCredits object\n    /// @param _totalSpentSalt the corresponding salt in the totalSpentVoiceCredit object\n    /// @param _resultCommitment hashLeftRight(merkle root of the results.tally, results.salt) in tally.json file\n    /// @return isValid Whether the provided values are valid\n    function verifyNonQvSpentVoiceCredits(\n        uint256 _totalSpent,\n        uint256 _totalSpentSalt,\n        uint256 _resultCommitment\n    ) internal view returns (bool isValid) {\n        uint256[2] memory tally;\n        tally[0] = _resultCommitment;\n        tally[1] = hashLeftRight(_totalSpent, _totalSpentSalt);\n\n        isValid = hash2(tally) == tallyCommitment;\n    }\n\n    /// @notice Verify the number of spent voice credits per vote option from the tally.json\n    /// @param _voteOptionIndex the index of the vote option where credits were spent\n    /// @param _spent the spent voice credits for a given vote option index\n    /// @param _spentProof proof generated for the perVOSpentVoiceCredits\n    /// @param _spentSalt the corresponding salt given in the tally perVOSpentVoiceCredits object\n    /// @param _voteOptionTreeDepth depth of the vote option tree\n    /// @param _spentVoiceCreditsHash hashLeftRight(number of spent voice credits, spent salt)\n    /// @param _resultCommitment hashLeftRight(merkle root of the results.tally, results.salt)\n    // in the tally.json file\n    /// @return isValid Whether the provided proof is valid\n    function verifyPerVOSpentVoiceCredits(\n        uint256 _voteOptionIndex,\n        uint256 _spent,\n        uint256[][] calldata _spentProof,\n        uint256 _spentSalt,\n        uint8 _voteOptionTreeDepth,\n        uint256 _spentVoiceCreditsHash,\n        uint256 _resultCommitment\n    ) public view returns (bool isValid) {\n        if (mode != Mode.QV) {\n            revert NotSupported();\n        }\n\n        uint256 computedRoot = computeMerkleRootFromPath(\n            _voteOptionTreeDepth,\n            _voteOptionIndex,\n            _spent,\n            _spentProof\n        );\n\n        uint256[3] memory tally;\n        tally[0] = _resultCommitment;\n        tally[1] = _spentVoiceCreditsHash;\n        tally[2] = hashLeftRight(computedRoot, _spentSalt);\n\n        isValid = hash3(tally) == tallyCommitment;\n    }\n\n    /// @notice Verify the result generated from the tally.json\n    /// @param _voteOptionIndex the index of the vote option to verify the correctness of the tally\n    /// @param _tallyResult Flattened array of the tally\n    /// @param _tallyResultProof Corresponding proof of the tally result\n    /// @param _tallyResultSalt the respective salt in the results object in the tally.json\n    /// @param _voteOptionTreeDepth depth of the vote option tree\n    /// @param _spentVoiceCreditsHash hashLeftRight(number of spent voice credits, spent salt)\n    /// @param _perVOSpentVoiceCreditsHash hashLeftRight(merkle root of the no spent voice\n    /// credits per vote option, perVOSpentVoiceCredits salt)\n    /// @return isValid Whether the provided proof is valid\n    function verifyTallyResult(\n        uint256 _voteOptionIndex,\n        uint256 _tallyResult,\n        uint256[][] calldata _tallyResultProof,\n        uint256 _tallyResultSalt,\n        uint8 _voteOptionTreeDepth,\n        uint256 _spentVoiceCreditsHash,\n        uint256 _perVOSpentVoiceCreditsHash\n    ) public view returns (bool isValid) {\n        uint256 computedRoot = computeMerkleRootFromPath(\n            _voteOptionTreeDepth,\n            _voteOptionIndex,\n            _tallyResult,\n            _tallyResultProof\n        );\n\n        if (mode == Mode.QV) {\n            uint256[3] memory tally;\n            tally[0] = hashLeftRight(computedRoot, _tallyResultSalt);\n            tally[1] = _spentVoiceCreditsHash;\n            tally[2] = _perVOSpentVoiceCreditsHash;\n\n            isValid = hash3(tally) == tallyCommitment;\n        } else if (mode == Mode.NON_QV) {\n            uint256[2] memory tally;\n            tally[0] = hashLeftRight(computedRoot, _tallyResultSalt);\n            tally[1] = _spentVoiceCreditsHash;\n\n            isValid = hash2(tally) == tallyCommitment;\n        }\n    }\n}\n"
    },
    "maci-contracts/contracts/TallyFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport { Tally } from \"./Tally.sol\";\nimport { ITallyFactory } from \"./interfaces/ITallyFactory.sol\";\nimport { DomainObjs } from \"./utilities/DomainObjs.sol\";\n\n/// @title TallyFactory\n/// @notice A factory contract which deploys Tally contracts.\ncontract TallyFactory is ITallyFactory, DomainObjs {\n  /// @inheritdoc ITallyFactory\n  function deploy(\n    address _verifier,\n    address _vkRegistry,\n    address _poll,\n    address _messageProcessor,\n    address _owner,\n    Mode _mode\n  ) public virtual returns (address tallyAddr) {\n    // deploy Tally for this Poll\n    Tally tally = new Tally(_verifier, _vkRegistry, _poll, _messageProcessor, _mode);\n    tally.transferOwnership(_owner);\n    tallyAddr = address(tally);\n  }\n}\n"
    },
    "maci-contracts/contracts/TopupCredit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @title TopupCredit\n/// @notice A contract representing a token used to topup a MACI's voter\n/// credits\ncontract TopupCredit is ERC20, Ownable {\n    uint8 public constant DECIMALS = 1;\n    uint256 public constant MAXIMUM_AIRDROP_AMOUNT = 100000 * 10 ** DECIMALS;\n\n    /// @notice custom errors\n    error ExceedLimit();\n\n    /// @notice create  a new TopupCredit token\n    constructor() payable ERC20(\"TopupCredit\", \"TopupCredit\") {}\n\n    /// @notice mint tokens to an account\n    /// @param account the account to mint tokens to\n    /// @param amount the amount of tokens to mint\n    function airdropTo(address account, uint256 amount) public onlyOwner {\n        if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\n            revert ExceedLimit();\n        }\n\n        _mint(account, amount);\n    }\n\n    /// @notice mint tokens to the contract owner\n    /// @param amount the amount of tokens to mint\n    function airdrop(uint256 amount) public onlyOwner {\n        if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\n            revert ExceedLimit();\n        }\n\n        _mint(msg.sender, amount);\n    }\n}\n"
    },
    "maci-contracts/contracts/trees/AccQueue.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Hasher} from \"../crypto/Hasher.sol\";\n\n/// @title AccQueue\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\n/// subtree. To obtain the main tree root, the contract owner must merge the\n/// subtrees together. Merging subtrees requires at least 2 operations:\n/// mergeSubRoots(), and merge(). To get around the gas limit,\n/// the mergeSubRoots() can be performed in multiple transactions.\nabstract contract AccQueue is Ownable, Hasher {\n    // The maximum tree depth\n    uint256 public constant MAX_DEPTH = 32;\n\n    /// @notice A Queue is a 2D array of Merkle roots and indices which represents nodes\n    /// in a Merkle tree while it is progressively updated.\n    struct Queue {\n        /// @notice IMPORTANT: the following declares an array of b elements of type T: T[b]\n        /// And the following declares an array of b elements of type T[a]: T[a][b]\n        /// As such, the following declares an array of MAX_DEPTH+1 arrays of\n        /// uint256[4] arrays, **not the other way round**:\n        uint256[4][MAX_DEPTH + 1] levels;\n        uint256[MAX_DEPTH + 1] indices;\n    }\n\n    // The depth of each subtree\n    uint256 internal immutable subDepth;\n\n    // The number of elements per hash operation. Should be either 2 (for\n    // binary trees) or 5 (quinary trees). The limit is 5 because that is the\n    // maximum supported number of inputs for the EVM implementation of the\n    // Poseidon hash function\n    uint256 internal immutable hashLength;\n\n    // hashLength ** subDepth\n    uint256 internal immutable subTreeCapacity;\n\n    // True hashLength == 2, false if hashLength == 5\n    bool internal isBinary;\n\n    // The index of the current subtree. e.g. the first subtree has index 0, the\n    // second has 1, and so on\n    uint256 internal currentSubtreeIndex;\n\n    // Tracks the current subtree.\n    Queue internal leafQueue;\n\n    // Tracks the smallest tree of subroots\n    Queue internal subRootQueue;\n\n    // Subtree roots\n    mapping(uint256 => uint256) internal subRoots;\n\n    // Merged roots\n    uint256[MAX_DEPTH + 1] internal mainRoots;\n\n    // Whether the subtrees have been merged\n    bool public subTreesMerged;\n\n    // Whether entire merkle tree has been merged\n    bool public treeMerged;\n\n    // The root of the shortest possible tree which fits all current subtree\n    // roots\n    uint256 internal smallSRTroot;\n\n    // Tracks the next subroot to queue\n    uint256 internal nextSubRootIndex;\n\n    // The number of leaves inserted across all subtrees so far\n    uint256 public numLeaves;\n\n    /// @notice custom errors\n    error SubDepthCannotBeZero();\n    error SubdepthTooLarge(uint256 _subDepth, uint256 max);\n    error InvalidHashLength();\n    error DepthCannotBeZero();\n    error SubTreesAlreadyMerged();\n    error NothingToMerge();\n    error SubTreesNotMerged();\n    error DepthTooLarge(uint256 _depth, uint256 max);\n    error DepthTooSmall(uint256 _depth, uint256 min);\n    error InvalidIndex(uint256 _index);\n    error InvalidLevel();\n\n    /// @notice Create a new AccQueue\n    /// @param _subDepth The depth of each subtree.\n    /// @param _hashLength The number of leaves per node (2 or 5).\n    constructor(uint256 _subDepth, uint256 _hashLength) payable {\n        /// validation\n        if (_subDepth == 0) revert SubDepthCannotBeZero();\n        if (_subDepth > MAX_DEPTH)\n            revert SubdepthTooLarge(_subDepth, MAX_DEPTH);\n        if (_hashLength != 2 && _hashLength != 5) revert InvalidHashLength();\n\n        isBinary = _hashLength == 2;\n        subDepth = _subDepth;\n        hashLength = _hashLength;\n        subTreeCapacity = _hashLength ** _subDepth;\n    }\n\n    /// @notice Hash the contents of the specified level and the specified leaf.\n    /// This is a virtual function as the hash function which the overriding\n    /// contract uses will be either hashLeftRight or hash5, which require\n    /// different input array lengths.\n    /// @param _level The level to hash.\n    /// @param _leaf The leaf include with the level.\n    /// @return _hash The hash of the level and leaf.\n    // solhint-disable-next-line no-empty-blocks\n    function hashLevel(\n        uint256 _level,\n        uint256 _leaf\n    ) internal virtual returns (uint256 _hash) {}\n\n    /// @notice Hash the contents of the specified level and the specified leaf.\n    /// This is a virtual function as the hash function which the overriding\n    /// contract uses will be either hashLeftRight or hash5, which require\n    /// different input array lengths.\n    /// @param _level The level to hash.\n    /// @param _leaf The leaf include with the level.\n    /// @return _hash The hash of the level and leaf.\n    // solhint-disable-next-line no-empty-blocks\n    function hashLevelLeaf(\n        uint256 _level,\n        uint256 _leaf\n    ) public view virtual returns (uint256 _hash) {}\n\n    /// @notice Returns the zero leaf at a specified level.\n    /// This is a virtual function as the hash function which the overriding\n    /// contract uses will be either hashLeftRight or hash5, which will produce\n    /// different zero values (e.g. hashLeftRight(0, 0) vs\n    /// hash5([0, 0, 0, 0, 0]). Moreover, the zero value may be a\n    /// nothing-up-my-sleeve value.\n    /// @param _level The level at which to return the zero leaf.\n    /// @return zero The zero leaf at the specified level.\n    // solhint-disable-next-line no-empty-blocks\n    function getZero(uint256 _level) internal virtual returns (uint256 zero) {}\n\n    /// @notice Add a leaf to the queue for the current subtree.\n    /// @param _leaf The leaf to add.\n    /// @return leafIndex The index of the leaf in the queue.\n    function enqueue(\n        uint256 _leaf\n    ) public onlyOwner returns (uint256 leafIndex) {\n        leafIndex = numLeaves;\n        // Recursively queue the leaf\n        _enqueue(_leaf, 0);\n\n        // Update the leaf counter\n        numLeaves = leafIndex + 1;\n\n        // Now that a new leaf has been added, mainRoots and smallSRTroot are\n        // obsolete\n        delete mainRoots;\n        delete smallSRTroot;\n        subTreesMerged = false;\n\n        // If a subtree is full\n        if (numLeaves % subTreeCapacity == 0) {\n            // Store the subroot\n            subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\n\n            // Increment the index\n            currentSubtreeIndex++;\n\n            // Delete ancillary data\n            delete leafQueue.levels[subDepth][0];\n            delete leafQueue.indices;\n        }\n    }\n\n    /// @notice Updates the queue at a given level and hashes any subroots\n    /// that need to be hashed.\n    /// @param _leaf The leaf to add.\n    /// @param _level The level at which to queue the leaf.\n    function _enqueue(uint256 _leaf, uint256 _level) internal {\n        if (_level > subDepth) {\n            revert InvalidLevel();\n        }\n\n        while (true) {\n            uint256 n = leafQueue.indices[_level];\n\n            if (n != hashLength - 1) {\n                // Just store the leaf\n                leafQueue.levels[_level][n] = _leaf;\n\n                if (_level != subDepth) {\n                    // Update the index\n                    leafQueue.indices[_level]++;\n                }\n\n                return;\n            }\n\n            // Hash the leaves to next level\n            _leaf = hashLevel(_level, _leaf);\n\n            // Reset the index for this level\n            delete leafQueue.indices[_level];\n\n            // Queue the hash of the leaves into to the next level\n            _level++;\n        }\n    }\n\n    /// @notice Fill any empty leaves of the current subtree with zeros and store the\n    /// resulting subroot.\n    function fill() public onlyOwner {\n        if (numLeaves % subTreeCapacity == 0) {\n            // If the subtree is completely empty, then the subroot is a\n            // precalculated zero value\n            subRoots[currentSubtreeIndex] = getZero(subDepth);\n        } else {\n            // Otherwise, fill the rest of the subtree with zeros\n            _fill(0);\n\n            // Store the subroot\n            subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\n\n            // Reset the subtree data\n            delete leafQueue.levels;\n\n            // Reset the merged roots\n            delete mainRoots;\n        }\n\n        // Increment the subtree index\n        uint256 curr = currentSubtreeIndex + 1;\n        currentSubtreeIndex = curr;\n\n        // Update the number of leaves\n        numLeaves = curr * subTreeCapacity;\n\n        // Reset the subroot tree root now that it is obsolete\n        delete smallSRTroot;\n\n        subTreesMerged = false;\n    }\n\n    /// @notice A function that queues zeros to the specified level, hashes,\n    /// the level, and enqueues the hash to the next level.\n    /// @param _level The level at which to queue zeros.\n    // solhint-disable-next-line no-empty-blocks\n    function _fill(uint256 _level) internal virtual {}\n\n    /// Insert a subtree. Used for batch enqueues.\n    function insertSubTree(uint256 _subRoot) public onlyOwner {\n        subRoots[currentSubtreeIndex] = _subRoot;\n\n        // Increment the subtree index\n        currentSubtreeIndex++;\n\n        // Update the number of leaves\n        numLeaves += subTreeCapacity;\n\n        // Reset the subroot tree root now that it is obsolete\n        delete smallSRTroot;\n\n        subTreesMerged = false;\n    }\n\n    /// @notice Calculate the lowest possible height of a tree with\n    /// all the subroots merged together.\n    /// @return depth The lowest possible height of a tree with all the\n    function calcMinHeight() public view returns (uint256 depth) {\n        depth = 1;\n        while (true) {\n            if (hashLength ** depth >= currentSubtreeIndex) {\n                break;\n            }\n            depth++;\n        }\n    }\n\n    /// @notice Merge all subtrees to form the shortest possible tree.\n    /// This function can be called either once to merge all subtrees in a\n    /// single transaction, or multiple times to do the same in multiple\n    /// transactions.\n    /// @param _numSrQueueOps The number of times this function will call\n    ///                       queueSubRoot(), up to the maximum number of times\n    ///                       necessary. If it is set to 0, it will call\n    ///                       queueSubRoot() as many times as is necessary. Set\n    ///                       this to a low number and call this function\n    ///                       multiple times if there are many subroots to\n    ///                       merge, or a single transaction could run out of\n    ///                       gas.\n    function mergeSubRoots(uint256 _numSrQueueOps) public onlyOwner {\n        // This function can only be called once unless a new subtree is created\n        if (subTreesMerged) revert SubTreesAlreadyMerged();\n\n        // There must be subtrees to merge\n        if (numLeaves == 0) revert NothingToMerge();\n\n        // Fill any empty leaves in the current subtree with zeros only if the\n        // current subtree is not full\n        if (numLeaves % subTreeCapacity != 0) {\n            fill();\n        }\n\n        // If there is only 1 subtree, use its root\n        if (currentSubtreeIndex == 1) {\n            smallSRTroot = getSubRoot(0);\n            subTreesMerged = true;\n            return;\n        }\n\n        uint256 depth = calcMinHeight();\n\n        uint256 queueOpsPerformed = 0;\n        for (uint256 i = nextSubRootIndex; i < currentSubtreeIndex; i++) {\n            if (_numSrQueueOps != 0 && queueOpsPerformed == _numSrQueueOps) {\n                // If the limit is not 0, stop if the limit has been reached\n                return;\n            }\n\n            // Queue the next subroot\n            queueSubRoot(getSubRoot(nextSubRootIndex), 0, depth);\n\n            // Increment the next subroot counter\n            nextSubRootIndex++;\n\n            // Increment the ops counter\n            queueOpsPerformed++;\n        }\n\n        // The height of the tree of subroots\n        uint256 m = hashLength ** depth;\n\n        // Queue zeroes to fill out the SRT\n        if (nextSubRootIndex == currentSubtreeIndex) {\n            uint256 z = getZero(subDepth);\n            for (uint256 i = currentSubtreeIndex; i < m; i++) {\n                queueSubRoot(z, 0, depth);\n            }\n        }\n\n        // Store the smallest main root\n        smallSRTroot = subRootQueue.levels[depth][0];\n        subTreesMerged = true;\n    }\n\n    /// @notice Queues a subroot into the subroot tree.\n    /// @param _leaf The value to queue.\n    /// @param _level The level at which to queue _leaf.\n    /// @param _maxDepth The depth of the tree.\n    function queueSubRoot(\n        uint256 _leaf,\n        uint256 _level,\n        uint256 _maxDepth\n    ) internal {\n        if (_level > _maxDepth) {\n            return;\n        }\n\n        uint256 n = subRootQueue.indices[_level];\n\n        if (n != hashLength - 1) {\n            // Just store the leaf\n            subRootQueue.levels[_level][n] = _leaf;\n            subRootQueue.indices[_level]++;\n        } else {\n            // Hash the elements in this level and queue it in the next level\n            uint256 hashed;\n            if (isBinary) {\n                uint256[2] memory inputs;\n                inputs[0] = subRootQueue.levels[_level][0];\n                inputs[1] = _leaf;\n                hashed = hash2(inputs);\n            } else {\n                uint256[5] memory inputs;\n                for (uint8 i = 0; i < n; i++) {\n                    inputs[i] = subRootQueue.levels[_level][i];\n                }\n                inputs[n] = _leaf;\n                hashed = hash5(inputs);\n            }\n\n            // TODO: change recursion to a while loop\n            // Recurse\n            delete subRootQueue.indices[_level];\n            queueSubRoot(hashed, _level + 1, _maxDepth);\n        }\n    }\n\n    /// @notice Merge all subtrees to form a main tree with a desired depth.\n    /// @param _depth The depth of the main tree. It must fit all the leaves or\n    ///               this function will revert.\n    /// @return root The root of the main tree.\n    function merge(uint256 _depth) public onlyOwner returns (uint256 root) {\n        // The tree depth must be more than 0\n        if (_depth == 0) revert DepthCannotBeZero();\n\n        // Ensure that the subtrees have been merged\n        if (!subTreesMerged) revert SubTreesNotMerged();\n\n        // Check the depth\n        if (_depth > MAX_DEPTH) revert DepthTooLarge(_depth, MAX_DEPTH);\n\n        // Calculate the SRT depth\n        uint256 srtDepth = subDepth;\n        while (true) {\n            if (hashLength ** srtDepth >= numLeaves) {\n                break;\n            }\n            srtDepth++;\n        }\n\n        if (_depth < srtDepth) revert DepthTooSmall(_depth, srtDepth);\n\n        // If the depth is the same as the SRT depth, just use the SRT root\n        if (_depth == srtDepth) {\n            mainRoots[_depth] = smallSRTroot;\n            treeMerged = true;\n            return smallSRTroot;\n        } else {\n            root = smallSRTroot;\n\n            // Calculate the main root\n\n            for (uint256 i = srtDepth; i < _depth; i++) {\n                uint256 z = getZero(i);\n\n                if (isBinary) {\n                    uint256[2] memory inputs;\n                    inputs[0] = root;\n                    inputs[1] = z;\n                    root = hash2(inputs);\n                } else {\n                    uint256[5] memory inputs;\n                    inputs[0] = root;\n                    inputs[1] = z;\n                    inputs[2] = z;\n                    inputs[3] = z;\n                    inputs[4] = z;\n                    root = hash5(inputs);\n                }\n            }\n\n            mainRoots[_depth] = root;\n            treeMerged = true;\n        }\n    }\n\n    /// @notice Returns the subroot at the specified index. Reverts if the index refers\n    /// to a subtree which has not been filled yet.\n    /// @param _index The subroot index.\n    /// @return subRoot The subroot at the specified index.\n    function getSubRoot(uint256 _index) public view returns (uint256 subRoot) {\n        if (currentSubtreeIndex <= _index) revert InvalidIndex(_index);\n        subRoot = subRoots[_index];\n    }\n\n    /// @notice Returns the subroot tree (SRT) root. Its value must first be computed\n    /// using mergeSubRoots.\n    /// @return smallSubTreeRoot The SRT root.\n    function getSmallSRTroot() public view returns (uint256 smallSubTreeRoot) {\n        if (!subTreesMerged) revert SubTreesNotMerged();\n        smallSubTreeRoot = smallSRTroot;\n    }\n\n    /// @notice Return the merged Merkle root of all the leaves at a desired depth.\n    /// @dev merge() or merged(_depth) must be called first.\n    /// @param _depth The depth of the main tree. It must first be computed\n    ///               using mergeSubRoots() and merge().\n    /// @return mainRoot The root of the main tree.\n    function getMainRoot(\n        uint256 _depth\n    ) public view returns (uint256 mainRoot) {\n        if (hashLength ** _depth < numLeaves)\n            revert DepthTooSmall(_depth, numLeaves);\n\n        mainRoot = mainRoots[_depth];\n    }\n\n    /// @notice Get the next subroot index and the current subtree index.\n    function getSrIndices()\n        public\n        view\n        returns (uint256 next, uint256 current)\n    {\n        next = nextSubRootIndex;\n        current = currentSubtreeIndex;\n    }\n}\n"
    },
    "maci-contracts/contracts/trees/AccQueueQuinary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { AccQueue } from \"./AccQueue.sol\";\n\n/// @title AccQueueQuinary\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\n/// subtree. To obtain the main tree root, the contract owner must merge the\n/// subtrees together. Merging subtrees requires at least 2 operations:\n/// mergeSubRoots(), and merge(). To get around the gas limit,\n/// the mergeSubRoots() can be performed in multiple transactions.\n/// @dev This contract is for a quinary tree (5 leaves per node)\nabstract contract AccQueueQuinary is AccQueue {\n  /// @notice Create a new AccQueueQuinary instance\n  constructor(uint256 _subDepth) AccQueue(_subDepth, 5) {}\n\n  /// @notice Hash the contents of the specified level and the specified leaf.\n  /// @dev it also frees up storage slots to refund gas.\n  /// @param _level The level to hash.\n  /// @param _leaf The leaf include with the level.\n  /// @return hashed The hash of the level and leaf.\n  function hashLevel(uint256 _level, uint256 _leaf) internal override returns (uint256 hashed) {\n    uint256[5] memory inputs;\n    inputs[0] = leafQueue.levels[_level][0];\n    inputs[1] = leafQueue.levels[_level][1];\n    inputs[2] = leafQueue.levels[_level][2];\n    inputs[3] = leafQueue.levels[_level][3];\n    inputs[4] = _leaf;\n    hashed = hash5(inputs);\n\n    // Free up storage slots to refund gas. Note that using a loop here\n    // would result in lower gas savings.\n    delete leafQueue.levels[_level];\n  }\n\n  /// @notice Hash the contents of the specified level and the specified leaf.\n  /// @param _level The level to hash.\n  /// @param _leaf The leaf include with the level.\n  /// @return hashed The hash of the level and leaf.\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view override returns (uint256 hashed) {\n    uint256[5] memory inputs;\n    inputs[0] = leafQueue.levels[_level][0];\n    inputs[1] = leafQueue.levels[_level][1];\n    inputs[2] = leafQueue.levels[_level][2];\n    inputs[3] = leafQueue.levels[_level][3];\n    inputs[4] = _leaf;\n    hashed = hash5(inputs);\n  }\n\n  /// @notice An internal function which fills a subtree\n  /// @param _level The level at which to fill the subtree\n  function _fill(uint256 _level) internal override {\n    while (_level < subDepth) {\n      uint256 n = leafQueue.indices[_level];\n\n      if (n != 0) {\n        // Fill the subtree level with zeros and hash the level\n        uint256 hashed;\n\n        uint256[5] memory inputs;\n        uint256 z = getZero(_level);\n        uint8 i = 0;\n        for (; i < n; i++) {\n          inputs[i] = leafQueue.levels[_level][i];\n        }\n\n        for (; i < hashLength; i++) {\n          inputs[i] = z;\n        }\n        hashed = hash5(inputs);\n\n        // Update the subtree from the next level onwards with the new leaf\n        _enqueue(hashed, _level + 1);\n      }\n\n      // Reset the current level\n      delete leafQueue.indices[_level];\n\n      _level++;\n    }\n  }\n}\n"
    },
    "maci-contracts/contracts/trees/AccQueueQuinaryMaci.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { MerkleZeros as MerkleQuinaryMaci } from \"./zeros/MerkleQuinaryMaci.sol\";\nimport { AccQueueQuinary } from \"./AccQueueQuinary.sol\";\n\n/// @title AccQueueQuinaryMaci\n/// @notice This contract extends AccQueueQuinary and MerkleQuinaryMaci\n/// @dev This contract is used for creating a\n/// Merkle tree with quinary (5 leaves per node) structure\ncontract AccQueueQuinaryMaci is AccQueueQuinary, MerkleQuinaryMaci {\n  /// @notice Constructor for creating AccQueueQuinaryMaci contract\n  /// @param _subDepth The depth of each subtree\n  constructor(uint256 _subDepth) AccQueueQuinary(_subDepth) {}\n\n  /// @notice Returns the zero leaf at a specified level\n  /// @param _level The level at which to return the zero leaf\n  /// @return zero The zero leaf at the specified level\n  function getZero(uint256 _level) internal view override returns (uint256 zero) {\n    zero = zeros[_level];\n  }\n}\n"
    },
    "maci-contracts/contracts/trees/EmptyBallotRoots.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nabstract contract EmptyBallotRoots {\n  // emptyBallotRoots contains the roots of Ballot trees of five leaf\n  // configurations.\n  // Each tree has a depth of 10, which is the hardcoded state tree depth.\n  // Each leaf is an empty ballot. A configuration refers to the depth of the\n  // voice option tree for that ballot.\n\n  // The leaf for the root at index 0 contains hash(0, root of a VO tree with\n  // depth 1 and zero-value 0)\n\n  // The leaf for the root at index 1 contains hash(0, root of a VO tree with\n  // depth 2 and zero-value 0)\n\n  // ... and so on.\n\n  // The first parameter to the hash function is the nonce, which is 0.\n\n  uint256[5] internal emptyBallotRoots;\n\n  constructor() {\n    emptyBallotRoots[0] = uint256(13281364503196209544253274922334946233843143002911019748768367786641235941724);\n    emptyBallotRoots[1] = uint256(7158037081351873044595590918553044361250246075395367832620250077468914234047);\n    emptyBallotRoots[2] = uint256(9759432434675223868798977858387314422448482665349017295334807726954807416922);\n    emptyBallotRoots[3] = uint256(21023978845296422869037320741066452987655237236573705325690286351587447653125);\n    emptyBallotRoots[4] = uint256(18355899015441218238819470296765940058403544417153582503322800815971979005442);\n  }\n}\n"
    },
    "maci-contracts/contracts/trees/LazyIMT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { PoseidonT3 } from \"../crypto/PoseidonT3.sol\";\n\n/// @notice A struct that holds a LazyIMT data\nstruct LazyIMTData {\n  uint40 maxIndex;\n  uint40 numberOfLeaves;\n  mapping(uint256 => uint256) elements;\n}\n\n/// @notice Custom errors\nerror DefaultZeroBadIndex();\nerror DepthTooLarge();\nerror DepthCannotBeZero();\nerror NumberOfLeavesCannotBeZero();\nerror AmbiguousDepth();\n\n/// @title InternalLazyIMT\n/// @dev A LazyIMT with Zeroes value set to the hash of\n/// a MACI Blank State Leaf\n/// @notice This implementation is taken from zk-kit\n/// https://github.com/privacy-scaling-explorations/zk-kit/blob/main/packages/imt.sol/contracts/internal/InternalLazyIMT.sol\n/// and modified to work with MACI.\nlibrary InternalLazyIMT {\n  uint256 internal constant MAX_DEPTH = 32;\n\n  uint40 internal constant MAX_INDEX = (1 << 32) - 1;\n\n  uint256 internal constant Z_0 = 6769006970205099520508948723718471724660867171122235270773600567925038008762;\n  uint256 internal constant Z_1 = 2972820301952105722688860985556183033855705951263221082702981787813754939537;\n  uint256 internal constant Z_2 = 19009473369953096352828532459942637819279786575057870804186038131433538383332;\n  uint256 internal constant Z_3 = 1877001762518233819645599208989578372605193385355680834239714249281096297174;\n  uint256 internal constant Z_4 = 4022598852800694816938652741439614774645858989706174527409714109784047480520;\n  uint256 internal constant Z_5 = 8078617093048295855521451309865989496051030103472138252021705658681696298712;\n  uint256 internal constant Z_6 = 21861637049723057871988413507302821095913894718242489848472531680353400271584;\n  uint256 internal constant Z_7 = 2969626195902860050407584814596940245443093107470116547781577350415736914038;\n  uint256 internal constant Z_8 = 13863086449569754493134198846069090996475357615094865751949144794620598051673;\n  uint256 internal constant Z_9 = 13774233155966252113965527228795435224641075024674384267997743867571011718458;\n  uint256 internal constant Z_10 = 7674682532432601125535053858292577379388329393276537570517515727197672122157;\n  uint256 internal constant Z_11 = 2657471847139856346360223652201172662911313292042510535836997980857168085414;\n  uint256 internal constant Z_12 = 14112562742724116016492623819773686970029672095023612838615540190985426106768;\n  uint256 internal constant Z_13 = 16966520284141749853106006448832965932249937855809150844697400390499975107456;\n  uint256 internal constant Z_14 = 21146121663662200258116396149536742745305242191891337170899444969488030502620;\n  uint256 internal constant Z_15 = 8395571901509192935479743034608666551563743095742598750914087478677907730358;\n  uint256 internal constant Z_16 = 11584898446168752024843587018551921614604785083342073076015560385003528300499;\n  uint256 internal constant Z_17 = 19681365563800708744156562671961079617734353445922751560400662591064339349816;\n  uint256 internal constant Z_18 = 11060693795061987995391612467169498625108376769265861980249917517984263067473;\n  uint256 internal constant Z_19 = 20136055137568042031318427040358591430196153124171666293804511634641041409480;\n  uint256 internal constant Z_20 = 10438448879123510479428288344427042332522761183009746406441238260861529360499;\n  uint256 internal constant Z_21 = 20302411580043873005239406811066876697276902025885155920151067303221158887923;\n  uint256 internal constant Z_22 = 16905699456770804689394621400052823445587122726651394178036372609288266146575;\n  uint256 internal constant Z_23 = 13317924909658910751179983108234689413063120680580702936091220805509299490708;\n  uint256 internal constant Z_24 = 11624463897690689883938167321830091369950933831231839575225419984927228390345;\n  uint256 internal constant Z_25 = 12388077003631746290497429926117583834311703848735670874049584990731919769551;\n  uint256 internal constant Z_26 = 16641943593086083573943184041147806885253724243247212515325749241831788827569;\n  uint256 internal constant Z_27 = 8675770901378242337954792996483564563211065498082968464791979179678744114204;\n  uint256 internal constant Z_28 = 3741944068643598116715410464277276913339851849923986024648161859457213369743;\n  uint256 internal constant Z_29 = 9365051374992868354747065577256691008852056444829383197903446097138255771103;\n  uint256 internal constant Z_30 = 19608043542461863702809013760105552654336523908709289008189330402608282498922;\n  uint256 internal constant Z_31 = 15116478429455923389320892447700153271977917184085737305957533984219061034768;\n  uint256 internal constant Z_32 = 13372161856163346716845871420623647679532631520878788090782842562075678687737;\n\n  /// @notice Returns the default zero value for a given index\n  /// @param index The index of the zero value\n  /// @return The zero value\n  function _defaultZero(uint8 index) internal pure returns (uint256) {\n    if (index == 0) return Z_0;\n    if (index == 1) return Z_1;\n    if (index == 2) return Z_2;\n    if (index == 3) return Z_3;\n    if (index == 4) return Z_4;\n    if (index == 5) return Z_5;\n    if (index == 6) return Z_6;\n    if (index == 7) return Z_7;\n    if (index == 8) return Z_8;\n    if (index == 9) return Z_9;\n    if (index == 10) return Z_10;\n    if (index == 11) return Z_11;\n    if (index == 12) return Z_12;\n    if (index == 13) return Z_13;\n    if (index == 14) return Z_14;\n    if (index == 15) return Z_15;\n    if (index == 16) return Z_16;\n    if (index == 17) return Z_17;\n    if (index == 18) return Z_18;\n    if (index == 19) return Z_19;\n    if (index == 20) return Z_20;\n    if (index == 21) return Z_21;\n    if (index == 22) return Z_22;\n    if (index == 23) return Z_23;\n    if (index == 24) return Z_24;\n    if (index == 25) return Z_25;\n    if (index == 26) return Z_26;\n    if (index == 27) return Z_27;\n    if (index == 28) return Z_28;\n    if (index == 29) return Z_29;\n    if (index == 30) return Z_30;\n    if (index == 31) return Z_31;\n    if (index == 32) return Z_32;\n    revert DefaultZeroBadIndex();\n  }\n\n  /// @notice Initializes the LazyIMT\n  /// @param self The LazyIMTData\n  /// @param depth The depth of the tree\n  function _init(LazyIMTData storage self, uint8 depth) internal {\n    if (depth > MAX_DEPTH) {\n      revert DepthTooLarge();\n    }\n    self.maxIndex = uint40((1 << depth) - 1);\n    self.numberOfLeaves = 0;\n  }\n\n  /// @notice Returns the index for a given level and index\n  /// @param level The level\n  /// @param index The index\n  /// @return The index for the element\n  function _indexForElement(uint8 level, uint40 index) internal pure returns (uint40) {\n    // store the elements sparsely\n    return MAX_INDEX * level + index;\n  }\n\n  /// @notice Inserts a leaf into the LazyIMT\n  /// @param self The LazyIMTData\n  /// @param leaf The leaf to insert\n  function _insert(LazyIMTData storage self, uint256 leaf) internal {\n    uint40 index = self.numberOfLeaves;\n\n    self.numberOfLeaves = index + 1;\n\n    uint256 hash = leaf;\n\n    for (uint8 i = 0; ; ) {\n      self.elements[_indexForElement(i, index)] = hash;\n      // it's a left element so we don't hash until there's a right element\n      if (index & 1 == 0) break;\n      uint40 elementIndex = _indexForElement(i, index - 1);\n      hash = PoseidonT3.poseidon([self.elements[elementIndex], hash]);\n      unchecked {\n        index >>= 1;\n        i++;\n      }\n    }\n  }\n\n  /// @notice Returns the root of the LazyIMT\n  /// @param self The LazyIMTData\n  /// @return The root of the LazyIMT\n  function _root(LazyIMTData storage self) internal view returns (uint256) {\n    // this will always short circuit if self.numberOfLeaves == 0\n    uint40 numberOfLeaves = self.numberOfLeaves;\n    // dynamically determine a depth\n    uint8 depth = 1;\n    while (uint40(2) ** uint40(depth) < numberOfLeaves) {\n      depth++;\n    }\n    return _root(self, numberOfLeaves, depth);\n  }\n\n  /// @notice Returns the root of the LazyIMT\n  /// @dev Here it's assumed that the depth value is valid.\n  /// If it is either 0 or > 2^8-1 this function will panic.\n  /// @param self The LazyIMTData\n  /// @param numberOfLeaves The number of leaves\n  /// @param depth The depth of the tree\n  /// @return The root of the LazyIMT\n  function _root(LazyIMTData storage self, uint40 numberOfLeaves, uint8 depth) internal view returns (uint256) {\n    if (depth > MAX_DEPTH) {\n      revert DepthTooLarge();\n    }\n    // this should always short circuit if self.numberOfLeaves == 0\n    if (numberOfLeaves == 0) return _defaultZero(depth);\n    uint256[] memory levels = new uint256[](depth + 1);\n    _levels(self, numberOfLeaves, depth, levels);\n    return levels[depth];\n  }\n\n  /// @notice Updates the levels of the LazyIMT\n  /// @param self The LazyIMTData\n  /// @param numberOfLeaves The number of leaves\n  /// @param depth The depth of the tree\n  /// @param levels The levels of the tree\n  function _levels(\n    LazyIMTData storage self,\n    uint40 numberOfLeaves,\n    uint8 depth,\n    uint256[] memory levels\n  ) internal view {\n    if (depth > MAX_DEPTH) {\n      revert DepthTooLarge();\n    }\n    if (numberOfLeaves == 0) {\n      revert NumberOfLeavesCannotBeZero();\n    }\n\n    // this should always short circuit if self.numberOfLeaves == 0\n    uint40 index = numberOfLeaves - 1;\n\n    if (index & 1 == 0) {\n      levels[0] = self.elements[_indexForElement(0, index)];\n    } else {\n      levels[0] = _defaultZero(0);\n    }\n\n    for (uint8 i = 0; i < depth; ) {\n      if (index & 1 == 0) {\n        levels[i + 1] = PoseidonT3.poseidon([levels[i], _defaultZero(i)]);\n      } else {\n        uint256 levelCount = (numberOfLeaves) >> (i + 1);\n        if (levelCount > index >> 1) {\n          uint256 parent = self.elements[_indexForElement(i + 1, index >> 1)];\n          levels[i + 1] = parent;\n        } else {\n          uint256 sibling = self.elements[_indexForElement(i, index - 1)];\n          levels[i + 1] = PoseidonT3.poseidon([sibling, levels[i]]);\n        }\n      }\n      unchecked {\n        index >>= 1;\n        i++;\n      }\n    }\n  }\n}\n"
    },
    "maci-contracts/contracts/trees/zeros/MerkleQuinaryMaci.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nabstract contract MerkleZeros {\n  uint256[33] internal zeros;\n\n  // Quinary tree zeros (Keccak hash of 'Maci')\n  constructor() {\n    zeros[0] = uint256(8370432830353022751713833565135785980866757267633941821328460903436894336785);\n    zeros[1] = uint256(12915444503621073454579416579430905206970714557680052030066757042249102605307);\n    zeros[2] = uint256(15825388848727206932541662858173052318786639683743459477657913288690190505308);\n    zeros[3] = uint256(20672917177817295069558894035958266756825295443848082659014905185716743537191);\n    zeros[4] = uint256(448586013948167251740855715259393055429962470693972912240018559200278204556);\n    zeros[5] = uint256(3228865992178886480410396198366133115832717015233640381802715479176981303177);\n    zeros[6] = uint256(19116532419590876304532847271428641103751206695152259493043279205958851263600);\n    zeros[7] = uint256(13531983203936271379763604150672239370281863210813769735936250692178889682484);\n    zeros[8] = uint256(8276490051100115441938424474671329955897359239518198952109759468777824929104);\n    zeros[9] = uint256(1234816188709792521426066175633785051600533236493067959807265450339481920006);\n    zeros[10] = uint256(14253963034950198848796956783804665963745244419038717333683296599064556174281);\n    zeros[11] = uint256(6367560368479067766970398112009211893636892126125767203198799843543931913172);\n    zeros[12] = uint256(9086778412328290069463938062555298073857321633960448227011862356090607842391);\n    zeros[13] = uint256(1440983698234119608650157588008070947531139377294971527360643096251396484622);\n    zeros[14] = uint256(3957599085599383799297196095384587366602816424699353871878382158004571037876);\n    zeros[15] = uint256(2874250189355749385170216620368454832544508482778847425177457138604069991955);\n    zeros[16] = uint256(21009179226085449764156117702096359546848859855915028677582017987249294772778);\n    zeros[17] = uint256(11639371146919469643603772238908032714588430905217730187804009793768292270213);\n    zeros[18] = uint256(6279313411277883478350325643881386249374023631847602720184182017599127173896);\n    zeros[19] = uint256(21059196126634383551994255775761712285020874549906884292741523421591865338509);\n    zeros[20] = uint256(9444544622817172574621750245792527383369133221167610044960147559319164808325);\n    zeros[21] = uint256(5374570219497355452080912323548395721574511162814862844226178635172695078543);\n    zeros[22] = uint256(4155904241440251764630449308160227499466701168124519106689866311729092343061);\n    zeros[23] = uint256(15881609944326576145786405158479503217901875433072026818450276983706463215155);\n    zeros[24] = uint256(20831546672064137588434602157208687297579005252478070660473540633558666587287);\n    zeros[25] = uint256(3209071488384365842993449718919243416332014108747571544339190291353564426179);\n    zeros[26] = uint256(10030934989297780221224272248227257782450689603145083016739151821673604746295);\n    zeros[27] = uint256(16504852316033851373501270056537918974469380446508638487151124538300880427080);\n    zeros[28] = uint256(5226137093551352657015038416264755428944140743893702595442932837011856178457);\n    zeros[29] = uint256(18779994066356991319291039019820482828679702085087990978933303018673869446075);\n    zeros[30] = uint256(12037506572124351893114409509086276299115869080424687624451184925646292710978);\n    zeros[31] = uint256(12049750997011422639258622747494178076018128204515149991024639355149614767606);\n    zeros[32] = uint256(3171463916443906096008599541392648187002297410622977814790586531203175805057);\n  }\n}\n"
    },
    "maci-contracts/contracts/utilities/CommonUtilities.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IPoll } from \"../interfaces/IPoll.sol\";\n\n/// @title CommonUtilities\n/// @notice A contract that holds common utilities\n/// which are to be used by multiple contracts\n/// namely Tally and MessageProcessor\ncontract CommonUtilities {\n  error VotingPeriodNotPassed();\n\n  /// @notice common function for MessageProcessor, and Tally\n  /// @param _poll the poll to be checked\n  function _votingPeriodOver(IPoll _poll) internal view {\n    (uint256 deployTime, uint256 duration) = _poll.getDeployTimeAndDuration();\n    // Require that the voting period is over\n    uint256 secondsPassed = block.timestamp - deployTime;\n    if (secondsPassed <= duration) {\n      revert VotingPeriodNotPassed();\n    }\n  }\n}\n"
    },
    "maci-contracts/contracts/utilities/DomainObjs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/// @title DomainObjs\n/// @notice An utility contract that holds\n/// a number of domain objects and functions\ncontract DomainObjs {\n  /// @notice the length of a MACI message\n  uint8 public constant MESSAGE_DATA_LENGTH = 10;\n\n  /// @notice voting modes\n  enum Mode {\n    QV,\n    NON_QV\n  }\n\n  /// @title Message\n  /// @notice this struct represents a MACI message\n  /// @dev msgType: 1 for vote message, 2 for topup message (size 2)\n  struct Message {\n    uint256 msgType;\n    uint256[MESSAGE_DATA_LENGTH] data;\n  }\n\n  /// @title PubKey\n  /// @notice A MACI public key\n  struct PubKey {\n    uint256 x;\n    uint256 y;\n  }\n\n  /// @title StateLeaf\n  /// @notice A MACI state leaf\n  /// @dev used to represent a user's state\n  /// in the state Merkle tree\n  struct StateLeaf {\n    PubKey pubKey;\n    uint256 voiceCreditBalance;\n    uint256 timestamp;\n  }\n}\n"
    },
    "maci-contracts/contracts/utilities/Params.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { IMACI } from \"../interfaces/IMACI.sol\";\nimport { AccQueue } from \"../trees/AccQueue.sol\";\nimport { TopupCredit } from \"../TopupCredit.sol\";\n\n/// @title Params\n/// @notice This contracts contains a number of structures\n/// which are to be passed as parameters to Poll contracts.\n/// This way we can reduce the number of parameters\n/// and avoid a stack too deep error during compilation.\ncontract Params {\n  /// @notice A struct holding the depths of the merkle trees\n  struct TreeDepths {\n    uint8 intStateTreeDepth;\n    uint8 messageTreeSubDepth;\n    uint8 messageTreeDepth;\n    uint8 voteOptionTreeDepth;\n  }\n\n  /// @notice A struct holding the max values for the poll\n  struct MaxValues {\n    uint256 maxMessages;\n    uint256 maxVoteOptions;\n  }\n\n  /// @notice A struct holding the external contracts\n  /// that are to be passed to a Poll contract on\n  /// deployment\n  struct ExtContracts {\n    IMACI maci;\n    AccQueue messageAq;\n    TopupCredit topupCredit;\n  }\n}\n"
    },
    "maci-contracts/contracts/utilities/Utilities.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\nimport { DomainObjs } from \"./DomainObjs.sol\";\nimport { Hasher } from \"../crypto/Hasher.sol\";\nimport { SnarkConstants } from \"../crypto/SnarkConstants.sol\";\n\n/// @title Utilities\n/// @notice An utility contract that can be used to:\n/// * hash a state leaf\n/// * pad and hash a MACI message\n/// * hash a MACI message and an encryption public key\ncontract Utilities is SnarkConstants, DomainObjs, Hasher {\n  /// @notice custom errors\n  error InvalidMessage();\n\n  /// @notice An utility function used to hash a state leaf\n  /// @param _stateLeaf the state leaf to be hashed\n  /// @return ciphertext The hash of the state leaf\n  function hashStateLeaf(StateLeaf memory _stateLeaf) public pure returns (uint256 ciphertext) {\n    uint256[4] memory plaintext;\n    plaintext[0] = _stateLeaf.pubKey.x;\n    plaintext[1] = _stateLeaf.pubKey.y;\n    plaintext[2] = _stateLeaf.voiceCreditBalance;\n    plaintext[3] = _stateLeaf.timestamp;\n\n    ciphertext = hash4(plaintext);\n  }\n\n  /// @notice An utility function used to pad and hash a MACI message\n  /// @param dataToPad the data to be padded\n  /// @param msgType the type of the message\n  /// @return message The padded message\n  /// @return padKey The padding public key\n  /// @return msgHash The hash of the padded message and encryption key\n  function padAndHashMessage(\n    uint256[2] memory dataToPad,\n    uint256 msgType\n  ) public pure returns (Message memory message, PubKey memory padKey, uint256 msgHash) {\n    // add data and pad it to 10 elements (automatically cause it's the default value)\n    uint256[10] memory dat;\n    dat[0] = dataToPad[0];\n    dat[1] = dataToPad[1];\n\n    padKey = PubKey(PAD_PUBKEY_X, PAD_PUBKEY_Y);\n    message = Message({ msgType: msgType, data: dat });\n    msgHash = hashMessageAndEncPubKey(message, padKey);\n  }\n\n  /// @notice An utility function used to hash a MACI message and an encryption public key\n  /// @param _message the message to be hashed\n  /// @param _encPubKey the encryption public key to be hashed\n  /// @return msgHash The hash of the message and the encryption public key\n  function hashMessageAndEncPubKey(\n    Message memory _message,\n    PubKey memory _encPubKey\n  ) public pure returns (uint256 msgHash) {\n    if (_message.data.length != 10) {\n      revert InvalidMessage();\n    }\n\n    uint256[5] memory n;\n    n[0] = _message.data[0];\n    n[1] = _message.data[1];\n    n[2] = _message.data[2];\n    n[3] = _message.data[3];\n    n[4] = _message.data[4];\n\n    uint256[5] memory m;\n    m[0] = _message.data[5];\n    m[1] = _message.data[6];\n    m[2] = _message.data[7];\n    m[3] = _message.data[8];\n    m[4] = _message.data[9];\n\n    msgHash = hash5([_message.msgType, hash5(n), hash5(m), _encPubKey.x, _encPubKey.y]);\n  }\n}\n"
    },
    "maci-contracts/contracts/VkRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {SnarkCommon} from \"./crypto/SnarkCommon.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IVkRegistry} from \"./interfaces/IVkRegistry.sol\";\nimport {DomainObjs} from \"./utilities/DomainObjs.sol\";\n\n/// @title VkRegistry\n/// @notice Stores verifying keys for the circuits.\n/// Each circuit has a signature which is its compile-time constants represented\n/// as a uint256.\ncontract VkRegistry is Ownable, DomainObjs, SnarkCommon, IVkRegistry {\n    mapping(Mode => mapping(uint256 => VerifyingKey)) internal processVks;\n    mapping(Mode => mapping(uint256 => bool)) internal processVkSet;\n\n    mapping(Mode => mapping(uint256 => VerifyingKey)) internal tallyVks;\n    mapping(Mode => mapping(uint256 => bool)) internal tallyVkSet;\n\n    event ProcessVkSet(uint256 _sig, Mode _mode);\n    event TallyVkSet(uint256 _sig, Mode _mode);\n\n    error ProcessVkAlreadySet();\n    error TallyVkAlreadySet();\n    error ProcessVkNotSet();\n    error TallyVkNotSet();\n    error SubsidyVkNotSet();\n    error InvalidKeysParams();\n\n    /// @notice Create a new instance of the VkRegistry contract\n    // solhint-disable-next-line no-empty-blocks\n    constructor() payable {}\n\n    /// @notice Check if the process verifying key is set\n    /// @param _sig The signature\n    /// @param _mode QV or Non-QV\n    /// @return isSet whether the verifying key is set\n    function isProcessVkSet(\n        uint256 _sig,\n        Mode _mode\n    ) public view returns (bool isSet) {\n        isSet = processVkSet[_mode][_sig];\n    }\n\n    /// @notice Check if the tally verifying key is set\n    /// @param _sig The signature\n    /// @param _mode QV or Non-QV\n    /// @return isSet whether the verifying key is set\n    function isTallyVkSet(\n        uint256 _sig,\n        Mode _mode\n    ) public view returns (bool isSet) {\n        isSet = tallyVkSet[_mode][_sig];\n    }\n\n    /// @notice generate the signature for the process verifying key\n    /// @param _stateTreeDepth The state tree depth\n    /// @param _messageTreeDepth The message tree depth\n    /// @param _voteOptionTreeDepth The vote option tree depth\n    /// @param _messageBatchSize The message batch size\n    function genProcessVkSig(\n        uint256 _stateTreeDepth,\n        uint256 _messageTreeDepth,\n        uint256 _voteOptionTreeDepth,\n        uint256 _messageBatchSize\n    ) public pure returns (uint256 sig) {\n        sig =\n            (_messageBatchSize << 192) +\n            (_stateTreeDepth << 128) +\n            (_messageTreeDepth << 64) +\n            _voteOptionTreeDepth;\n    }\n\n    /// @notice generate the signature for the tally verifying key\n    /// @param _stateTreeDepth The state tree depth\n    /// @param _intStateTreeDepth The intermediate state tree depth\n    /// @param _voteOptionTreeDepth The vote option tree depth\n    /// @return sig The signature\n    function genTallyVkSig(\n        uint256 _stateTreeDepth,\n        uint256 _intStateTreeDepth,\n        uint256 _voteOptionTreeDepth\n    ) public pure returns (uint256 sig) {\n        sig =\n            (_stateTreeDepth << 128) +\n            (_intStateTreeDepth << 64) +\n            _voteOptionTreeDepth;\n    }\n\n    /// @notice Set the process and tally verifying keys for a certain combination\n    /// of parameters and modes\n    /// @param _stateTreeDepth The state tree depth\n    /// @param _intStateTreeDepth The intermediate state tree depth\n    /// @param _messageTreeDepth The message tree depth\n    /// @param _voteOptionTreeDepth The vote option tree depth\n    /// @param _messageBatchSize The message batch size\n    /// @param _modes Array of QV or Non-QV modes (must have the same length as process and tally keys)\n    /// @param _processVks The process verifying keys (must have the same length as modes)\n    /// @param _tallyVks The tally verifying keys (must have the same length as modes)\n    function setVerifyingKeysBatch(\n        uint256 _stateTreeDepth,\n        uint256 _intStateTreeDepth,\n        uint256 _messageTreeDepth,\n        uint256 _voteOptionTreeDepth,\n        uint256 _messageBatchSize,\n        Mode[] calldata _modes,\n        VerifyingKey[] calldata _processVks,\n        VerifyingKey[] calldata _tallyVks\n    ) public onlyOwner {\n        if (\n            _modes.length != _processVks.length ||\n            _modes.length != _tallyVks.length\n        ) {\n            revert InvalidKeysParams();\n        }\n\n        uint256 length = _modes.length;\n\n        for (uint256 index = 0; index < length; ) {\n            setVerifyingKeys(\n                _stateTreeDepth,\n                _intStateTreeDepth,\n                _messageTreeDepth,\n                _voteOptionTreeDepth,\n                _messageBatchSize,\n                _modes[index],\n                _processVks[index],\n                _tallyVks[index]\n            );\n\n            unchecked {\n                index++;\n            }\n        }\n    }\n\n    /// @notice Set the process and tally verifying keys for a certain combination\n    /// of parameters\n    /// @param _stateTreeDepth The state tree depth\n    /// @param _intStateTreeDepth The intermediate state tree depth\n    /// @param _messageTreeDepth The message tree depth\n    /// @param _voteOptionTreeDepth The vote option tree depth\n    /// @param _messageBatchSize The message batch size\n    /// @param _mode QV or Non-QV\n    /// @param _processVk The process verifying key\n    /// @param _tallyVk The tally verifying key\n    function setVerifyingKeys(\n        uint256 _stateTreeDepth,\n        uint256 _intStateTreeDepth,\n        uint256 _messageTreeDepth,\n        uint256 _voteOptionTreeDepth,\n        uint256 _messageBatchSize,\n        Mode _mode,\n        VerifyingKey calldata _processVk,\n        VerifyingKey calldata _tallyVk\n    ) public onlyOwner {\n        uint256 processVkSig = genProcessVkSig(\n            _stateTreeDepth,\n            _messageTreeDepth,\n            _voteOptionTreeDepth,\n            _messageBatchSize\n        );\n\n        if (processVkSet[_mode][processVkSig]) revert ProcessVkAlreadySet();\n\n        uint256 tallyVkSig = genTallyVkSig(\n            _stateTreeDepth,\n            _intStateTreeDepth,\n            _voteOptionTreeDepth\n        );\n\n        if (tallyVkSet[_mode][tallyVkSig]) revert TallyVkAlreadySet();\n\n        VerifyingKey storage processVk = processVks[_mode][processVkSig];\n        processVk.alpha1 = _processVk.alpha1;\n        processVk.beta2 = _processVk.beta2;\n        processVk.gamma2 = _processVk.gamma2;\n        processVk.delta2 = _processVk.delta2;\n\n        uint256 processIcLength = _processVk.ic.length;\n        for (uint256 i = 0; i < processIcLength; ) {\n            processVk.ic.push(_processVk.ic[i]);\n\n            unchecked {\n                i++;\n            }\n        }\n\n        processVkSet[_mode][processVkSig] = true;\n\n        VerifyingKey storage tallyVk = tallyVks[_mode][tallyVkSig];\n        tallyVk.alpha1 = _tallyVk.alpha1;\n        tallyVk.beta2 = _tallyVk.beta2;\n        tallyVk.gamma2 = _tallyVk.gamma2;\n        tallyVk.delta2 = _tallyVk.delta2;\n\n        uint256 tallyIcLength = _tallyVk.ic.length;\n        for (uint256 i = 0; i < tallyIcLength; ) {\n            tallyVk.ic.push(_tallyVk.ic[i]);\n\n            unchecked {\n                i++;\n            }\n        }\n\n        tallyVkSet[_mode][tallyVkSig] = true;\n\n        emit TallyVkSet(tallyVkSig, _mode);\n        emit ProcessVkSet(processVkSig, _mode);\n    }\n\n    /// @notice Check if the process verifying key is set\n    /// @param _stateTreeDepth The state tree depth\n    /// @param _messageTreeDepth The message tree depth\n    /// @param _voteOptionTreeDepth The vote option tree depth\n    /// @param _messageBatchSize The message batch size\n    /// @param _mode QV or Non-QV\n    /// @return isSet whether the verifying key is set\n    function hasProcessVk(\n        uint256 _stateTreeDepth,\n        uint256 _messageTreeDepth,\n        uint256 _voteOptionTreeDepth,\n        uint256 _messageBatchSize,\n        Mode _mode\n    ) public view returns (bool isSet) {\n        uint256 sig = genProcessVkSig(\n            _stateTreeDepth,\n            _messageTreeDepth,\n            _voteOptionTreeDepth,\n            _messageBatchSize\n        );\n        isSet = processVkSet[_mode][sig];\n    }\n\n    /// @notice Get the process verifying key by signature\n    /// @param _sig The signature\n    /// @param _mode QV or Non-QV\n    /// @return vk The verifying key\n    function getProcessVkBySig(\n        uint256 _sig,\n        Mode _mode\n    ) public view returns (VerifyingKey memory vk) {\n        if (!processVkSet[_mode][_sig]) revert ProcessVkNotSet();\n\n        vk = processVks[_mode][_sig];\n    }\n\n    /// @inheritdoc IVkRegistry\n    function getProcessVk(\n        uint256 _stateTreeDepth,\n        uint256 _messageTreeDepth,\n        uint256 _voteOptionTreeDepth,\n        uint256 _messageBatchSize,\n        Mode _mode\n    ) public view returns (VerifyingKey memory vk) {\n        uint256 sig = genProcessVkSig(\n            _stateTreeDepth,\n            _messageTreeDepth,\n            _voteOptionTreeDepth,\n            _messageBatchSize\n        );\n\n        vk = getProcessVkBySig(sig, _mode);\n    }\n\n    /// @notice Check if the tally verifying key is set\n    /// @param _stateTreeDepth The state tree depth\n    /// @param _intStateTreeDepth The intermediate state tree depth\n    /// @param _voteOptionTreeDepth The vote option tree depth\n    /// @param _mode QV or Non-QV\n    /// @return isSet whether the verifying key is set\n    function hasTallyVk(\n        uint256 _stateTreeDepth,\n        uint256 _intStateTreeDepth,\n        uint256 _voteOptionTreeDepth,\n        Mode _mode\n    ) public view returns (bool isSet) {\n        uint256 sig = genTallyVkSig(\n            _stateTreeDepth,\n            _intStateTreeDepth,\n            _voteOptionTreeDepth\n        );\n\n        isSet = tallyVkSet[_mode][sig];\n    }\n\n    /// @notice Get the tally verifying key by signature\n    /// @param _sig The signature\n    /// @param _mode QV or Non-QV\n    /// @return vk The verifying key\n    function getTallyVkBySig(\n        uint256 _sig,\n        Mode _mode\n    ) public view returns (VerifyingKey memory vk) {\n        if (!tallyVkSet[_mode][_sig]) revert TallyVkNotSet();\n\n        vk = tallyVks[_mode][_sig];\n    }\n\n    /// @inheritdoc IVkRegistry\n    function getTallyVk(\n        uint256 _stateTreeDepth,\n        uint256 _intStateTreeDepth,\n        uint256 _voteOptionTreeDepth,\n        Mode _mode\n    ) public view returns (VerifyingKey memory vk) {\n        uint256 sig = genTallyVkSig(\n            _stateTreeDepth,\n            _intStateTreeDepth,\n            _voteOptionTreeDepth\n        );\n\n        vk = getTallyVkBySig(sig, _mode);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "mode": "3",
      "fallback_to_optimizing_for_size": false
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout"
        ],
        "": [
          "ast"
        ]
      }
    },
    "detectMissingLibraries": false,
    "forceEVMLA": false,
    "enableEraVMExtensions": false,
    "libraries": {
      "maci-contracts/contracts/crypto/PoseidonT3.sol": {
        "PoseidonT3": "0x1447872E09b36eB3Bc49cF930c47175Da46139fE"
      },
      "maci-contracts/contracts/crypto/PoseidonT6.sol": {
        "PoseidonT6": "0x5BfcF5A1b1e0e0D5E1B4d352f8eCF8f29913008D"
      },
      "maci-contracts/contracts/crypto/PoseidonT4.sol": {
        "PoseidonT4": "0x8Aba44ee35A51c51F271D68c5dc936c529f762BC"
      },
      "maci-contracts/contracts/crypto/PoseidonT5.sol": {
        "PoseidonT5": "0xbFcb4f0fa5F3831998408d63882E0f6E2095C49F"
      }
    }
  }
}